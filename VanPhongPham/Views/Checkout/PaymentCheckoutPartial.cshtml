@model IEnumerable<VanPhongPham.Models.payment_method>

@{
    var totalAmount = ViewBag.TotalAmount;
    var adrs = ViewBag.adrs as VanPhongPham.Models.address;
    var wallet = ViewBag.wallet as VanPhongPham.Models.user_wallet;
}
<style>
    .checkoutlayout {
        background-color: #fff;
        border: 1px solid #ddd;
        font-family: Arial, sans-serif;
    }

    .checkout-header {
        font-weight: bold;
        font-size: 20px;
    }

    .checkout-header-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .checkout-content {
        margin-top: 20px;
    }

    .checkout-item {
        margin-bottom: 10px;
        font-size: 14px;
    }

        .checkout-item .total-payment {
            color: red;
            font-size: 24px;
        }

    .checkout-footer-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 20px;
        font-size: 14px;
        color: #777;
    }

    .order-button {
        background-color: #ff4d4f;
        color: white;
        border: none;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
    }

    .custom-select {
        width: 250px;
        font-size: 14px;
        border: 1px solid #ddd;
        text-align: right;
        border-radius: 5px;
        appearance: none;
        background-color: #f9f9f9;
        background-image: url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/svgs/solid/angle-down.svg");
        background-repeat: no-repeat;
        background-position: right 10px center;
        background-size: 12px;
        cursor: pointer;
    }

    .custom-select:focus {
        outline: none;
        border-color: #ff4d4f;
        box-shadow: 0 0 3px rgba(255, 77, 79, 0.5);
    }

    #qvdPaySection {
        padding: 15px;
        border: 1px solid #ddd;
        background-color: #f9f9f9;
        border-radius: 5px;
    }

    #insufficientBalance {
        font-weight: bold;
    }
</style>

<div class="checkoutlayout p-4" style="margin-top: 20px;">
    <!-- Header with Payment Method Select -->
    <div class="checkout-header-row d-flex flex-column flex-md-row justify-content-between align-items-center">
        <div class="checkout-header mb-3 mb-md-0">Phương thức thanh toán</div>
        <select id="payment-method-select" class="custom-select w-md-100 w-md-auto">
            @if (totalAmount >= 2000000)
            {
                <option value="@Model.FirstOrDefault(m => m.method_id == "PAY002").method_id">@Model.FirstOrDefault(m => m.method_id == "PAY002").method_name</option>
            }
            else
            {
                foreach (var method in Model)
                {
                    <option value="@method.method_id">@method.method_name</option>
                }
            }
        </select>
    </div>

    <hr />

    <!-- Khu vực hiển thị thông tin ví QVDPay -->
    <div id="qvdPaySection" style="display: none; margin-top: 20px;" data-walletbalance="@wallet.balance.Value">
        <h5>Thanh toán bằng Ví QVDPay</h5>
        <p>Số dư hiện tại: <span id="walletBalance">₫@wallet.balance.Value.ToString("N0")</span></p>
    </div>

    <!-- Middle Section with Order Summary -->
    <div class="checkout-content">
        <div class="row">
            <!-- Left Column: Order note -->
            <div class="col-12 col-md-6">
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Lời nhắn:</label>
                    <div class="col-sm-10">
                        <input type="text" class="form-control" name="ordernote" id="ordernote" placeholder="Lưu ý cho người bán...." />
                    </div>
                </div>
            </div>

            <!-- Right Column: Payment details -->
            <div class="col-12 col-md-6">
                <div class="checkout-item d-flex justify-content-between mb-3">
                    <div class="col-6 text-left p-0" style="color: #777777">
                        <span>Tổng tiền hàng</span>
                    </div>
                    <div class="col-2 text-right p-0" style="color: #272727">
                        <span class="totalamount" data-order-totalamount="@totalAmount">₫@totalAmount.ToString("N0")</span>
                    </div>
                </div>

                <div class="checkout-item d-flex justify-content-between mb-3">
                    <div class="col-6 text-left p-0" style="color: #777777">
                        <span>Tổng tiền phí vận chuyển</span>
                    </div>
                    <div class="col-6 text-right p-0" style="color: #272727">
                        <span class="fee-ship"></span>
                    </div>
                </div>

                <div class="checkout-item d-flex justify-content-end" style="margin-top: 20px">
                    <div class="col-6 text-left p-0" style="color: #777777">
                        <span>Giảm giá tiền hàng</span>
                    </div>
                    <div class="col-6 text-right p-0" style="color: #272727">
                        <span class="discount_amount">-₫0.000</span>
                    </div>
                </div>

                <div class="checkout-item d-flex justify-content-end" style="margin-top: 20px;">
                    <div class="col-6 d-flex align-items-center justify-content-start p-0" style="color: #777777;">
                        <span>Tổng thanh toán</span>
                    </div>
                    <div class="col-6 text-right p-0">
                        <span class="total-payment" data-order-totalamount="@totalAmount"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <hr />

    <!-- Footer with Terms and Order Button -->
    <div class="checkout-footer-row d-flex flex-column flex-md-row align-items-center justify-content-between">
        <div class="text-center text-md-left mb-3 mb-md-0">
            Nhấn "Đặt hàng" đồng nghĩa với việc bạn đồng ý tuân theo
            <a href="#" style="text-decoration: none; color: #007bff;">Điều khoản QVD</a>
        </div>
        <button class="order-button btn btn-primary w-md-100 w-md-auto">Đặt hàng</button>
    </div>
</div>

<script>
    const userData1 = JSON.parse(sessionStorage.getItem('user'));
    var storedAddress1 = sessionStorage.getItem("selectedAddress");
    const todistrict = storedAddress1 ? JSON.parse(storedAddress1).district : '@(adrs != null ? adrs.district.ToString() : "default-district")';
    const toward = storedAddress1 ? JSON.parse(storedAddress1).ward : '@(adrs != null ? adrs.ward.ToString() : "default-ward")';


    document.addEventListener('DOMContentLoaded', async function () {
        try {
            const responseService = await getService(todistrict);
            const totalWeight = JSON.parse(sessionStorage.getItem('items')).totalWeight; // Lấy trọng lượng từ sessionStorage

            // Kiểm tra nếu responseService và responseService.data hợp lệ
            if (!responseService) {
                console.error("Không có dữ liệu dịch vụ vận chuyển.");
                return; // Dừng lại nếu không có dữ liệu
            }

            // Kiểm tra xem totalWeight có lớn hơn hoặc nhỏ hơn 20000 hay không
            let serviceTypeId;
            if (totalWeight < 20000) {
                // Lấy service_type_id = 2 cho "Hàng nhẹ"
                const lightItem = responseService.find(item => item.service_type_id === 2);
                serviceTypeId = lightItem ? lightItem.service_type_id : null;
            }
            else {
                // Lấy service_type_id = 5 cho "Hàng nặng"
                const heavyItem = responseService.find(item => item.service_type_id === 5);
                serviceTypeId = heavyItem ? heavyItem.service_type_id : null;
            }

            // Gọi hàm getFee để lấy phí vận chuyển
            if (serviceTypeId)
            {
                const feeResponse = await getFee(serviceTypeId, todistrict, toward, totalWeight, JSON.parse(sessionStorage.getItem('items')).items);

                // Kiểm tra nếu feeResponse hợp lệ
                if (feeResponse) {
                    // Lấy giá trị phí vận chuyển từ feeResponse
                    const serviceFee = feeResponse.service_fee;

                    // Cập nhật phí vận chuyển vào phần tử HTML
                    document.querySelector('.fee-ship').innerText = `₫${serviceFee.toLocaleString('de-DE')}`;

                    const totalamount = parseFloat(document.querySelector('.total-payment').getAttribute("data-order-totalamount")) || 0;

                    // Cập nhật phần tổng thanh toán
                    const totalAmountWithFee = totalamount + serviceFee;
                    document.querySelector('.total-payment').innerText = `₫${totalAmountWithFee.toLocaleString('de-DE')}`;
                } else {
                    console.error("Lỗi khi lấy phí vận chuyển.");
                }
            }
            else
            {
                console.error("Không tìm thấy dịch vụ vận chuyển phù hợp.");
            }

            // Tiếp tục xử lý với serviceTypeId nếu cần
        } catch (error) {
            console.error("Lỗi trong quá trình xử lý:", error);
        }
    });


    document.querySelector('.order-button').addEventListener('click', async () => {
        try {
            const ordnote = document.getElementById('ordernote');
            const selectedMethod = document.getElementById('payment-method-select').value;
            // Lấy giá trị từ phần tử HTML có chứa phí vận chuyển
            let shipping_fee_text = document.querySelector('.fee-ship').innerText;

            // Loại bỏ ký tự ₫ và dấu phân cách, sau đó chuyển đổi thành số thực
            let shipping_fee = parseFloat(shipping_fee_text.replace(/[₫,.]/g, ''));

            // Kiểm tra và tạo chuỗi thông tin địa chỉ
            const addressData = storedAddress1 ?
                `${JSON.parse(storedAddress1).fullName}, ${JSON.parse(storedAddress1).phone}, ${JSON.parse(storedAddress1).addressLine}`
                : null;

            var appcoupon = sessionStorage.getItem("appliedcoupon");

            let result12 = { success: true };

            if (appcoupon)
            {
                const response12 = await fetch('/Checkout/CheckCoupon', {
                    method: "POST",
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ coupon_code: JSON.parse(appcoupon).coupon_code })
                });

                result12 = await response12.json();
            }

            if (result12.success) {
                if (selectedMethod === "PAY001") {
                    const response = await fetch('/Checkout/SaveOrder', {
                        method: "POST",
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            user_id: userData1.MaTaiKhoan,
                            cart_id: userData1.CartID,
                            info_adrs: addressData,
                            ordernote: ordnote.value.trim(),
                            method_id: selectedMethod,
                            shipping_fee: shipping_fee,
                            discount_amount: appcoupon ? parseFloat(JSON.parse(appcoupon).discount_amount) : 0,
                            coupon_applied: appcoupon ? JSON.parse(appcoupon).coupon_applied : null,
                            orderID: null
                        })
                    });

                    const result = await response.json();

                    if (result.success) {
                        const url = `@Url.Action("Index", "Profile")?order_status_id=${1}&MaTaiKhoan=${userData.MaTaiKhoan}&view=OrderPartial`;
                        window.location.href = url;
                    }
                    else if (!result.success) {
                        @*const url = `@Url.Action("Index", "Cart")?cart_id=${userData1.CartID}`;
                        window.location.href = url;*@
                        showNotification('Số lượng tồn kho không đủ', 'danger');
                    }
                }
                else if (selectedMethod === "PAY002") {
                    const response = await fetch('/Checkout/InitVNPay', {
                        method: "POST",
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            user_id: userData1.MaTaiKhoan,
                            cart_id: userData1.CartID,
                            info_adrs: addressData,
                            ordernote: ordnote.value.trim(),
                            shipping_fee: shipping_fee,
                            discount_amount: appcoupon ? parseFloat(JSON.parse(appcoupon).discount_amount) : 0,
                            coupon_applied: appcoupon ? JSON.parse(appcoupon).coupon_applied : null
                        })
                    });
                    const result = await response.json();
                    if (result.success) {
                        window.location.href = result.vnpayUrl;
                    }
                    else if (!result.success) {
                        showNotification('Số lượng tồn kho không đủ', 'danger');
                    }
                }
                else if (selectedMethod === "PAY003")
                {
                    const response = await fetch('/Checkout/SaveOrder', {
                        method: "POST",
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            user_id: userData1.MaTaiKhoan,
                            cart_id: userData1.CartID,
                            info_adrs: addressData,
                            ordernote: ordnote.value.trim(),
                            method_id: selectedMethod,
                            shipping_fee: shipping_fee,
                            discount_amount: appcoupon ? parseFloat(JSON.parse(appcoupon).discount_amount) : 0,
                            coupon_applied: appcoupon ? JSON.parse(appcoupon).coupon_applied : null,
                            orderID: null
                        })
                    });

                    const result = await response.json();

                    if (result.success) {
                        const url = `@Url.Action("Index", "Profile")?order_status_id=${1}&MaTaiKhoan=${userData.MaTaiKhoan}&view=OrderPartial`;
                        window.location.href = url;
                    }
                    else if (!result.success) {
                        @*const url = `@Url.Action("Index", "Cart")?cart_id=${userData1.CartID}`;
                        window.location.href = url;*@
                        showNotification('Số lượng tồn kho không đủ', 'danger');
                    }
                }
            }
            else
            {
                if (result12.message === "Mã giảm giá đã hết hạn.") {
                    sessionStorage.removeItem('appliedcoupon');
                    showNotification('Mã giảm giá đã hết hạn.', 'danger');
                    location.reload();
                }
                else if (result12.message === "Mã giảm giá đã hết số lượng.") {
                    sessionStorage.removeItem('appliedcoupon');
                    showNotification('Mã giảm giá đã hết số lượng.', 'danger');
                    location.reload();
                }
                else {
                    sessionStorage.removeItem('appliedcoupon');
                    showNotification('Mã giảm giá không tồn tại.', 'danger');
                    location.reload();
                }
            }
        } catch (error) {
            console.error("Không thể lưu Order", error);
        }
    });

    document.getElementById('payment-method-select').addEventListener('change', function () {
        const selectedOption = this.options[this.selectedIndex];
        const methodId = selectedOption.value; // Lấy phương thức thanh toán đã chọn

        const qvdPaySection = document.getElementById('qvdPaySection');

        // Kiểm tra nếu chọn Ví QVDPay
        if (methodId === 'PAY003') {
            // Hiển thị thông tin Ví QVDPay
            qvdPaySection.style.display = 'block';
            const walletBalance = parseFloat(qvdPaySection.getAttribute("data-walletbalance"));
            const totalText = document.querySelector('.total-payment').innerText;
            const totalamount = parseFloat(totalText.replace(/[₫.]/g, '').replace(',', '.')) || 0;

            if (walletBalance < totalamount) {
                document.querySelector('.order-button').classList.add("disabled");
            }
            else
            {
                document.querySelector('.order-button').classList.remove("disabled");
            }
        }
        else
        {
            // Ẩn thông tin Ví QVDPay khi chọn phương thức khác
            qvdPaySection.style.display = 'none';
            document.querySelector('.order-button').classList.remove("disabled");
        }
    });

    function showNotification(message, messageType) {
        var notificationContainer = document.getElementById("notification-container");
        var notification = document.createElement("div");
        notification.className = `alert alert-${messageType} alert-dismissible fade show`;
        notification.innerHTML = `
            <button type="button" class="close" data-dismiss="alert">&times;</button>
            ${message}
        `;

        notificationContainer.appendChild(notification);

        setTimeout(function () {
            notification.remove();
        }, 3000);
    }
</script>