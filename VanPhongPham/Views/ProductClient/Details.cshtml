
@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_LayoutClient.cshtml";
}
<style>
    .review-item {
        display: flex;
        align-items: flex-start;
    }

    .review-avatar img {
        width: 50px;
        height: 50px;
        object-fit: cover;
    }

    .review-content {
        flex-grow: 1;
    }

    .rating i {
        margin-right: 2px;
    }

    .review-content .text-muted {
        font-size: 0.875rem; /* Kích thước nhỏ hơn cho ngày */
    }
    /* Ẩn mũi tên tăng giảm của input type number */
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
</style>
@model VanPhongPham.Models.ViewModels
<!-- Page Header Start -->
@*<div class="container-fluid bg-secondary mb-5">
        <div class="d-flex flex-column align-items-center justify-content-center" style="min-height: 300px">
            <h1 class="font-weight-semi-bold text-uppercase mb-3">Shop Detail</h1>
            <div class="d-inline-flex">
                <p class="m-0"><a href="">Home</a></p>
                <p class="m-0 px-2">-</p>
                <p class="m-0">Shop Detail</p>
            </div>
        </div>
    </div>*@
<!-- Page Header End -->
<!-- Shop Detail Start -->
<div class="container-fluid py-5">
    <div class="row px-xl-5">
        <div class="col-lg-5 pb-5">
            <div id="product-carousel" class="carousel slide" data-ride="carousel">
                <div class="carousel-inner border">
                    @foreach (var product in Model.ProductViewModel)
                    {
                        for (int i = 0; i < product.Images.Count; i++)
                        {
                            <div class="carousel-item @(i == 0 ? "active" : "")">
                                <img class="w-100 h-100" src="@product.Images[i].ImageUrl" alt="@product.Images[i].Description">
                            </div>
                        }
                    }

                </div>
                <a class="carousel-control-prev" href="#product-carousel" data-slide="prev">
                    <i class="fa fa-2x fa-angle-left text-dark"></i>
                </a>
                <a class="carousel-control-next" href="#product-carousel" data-slide="next">
                    <i class="fa fa-2x fa-angle-right text-dark"></i>
                </a>
            </div>
        </div>

        <div class="col-lg-7 pb-5">
            <h3 class="font-weight-semi-bold">@Model.ProductViewModel.FirstOrDefault().ProductName</h3>
            <div class="d-flex mb-3 align-items-center">
                <div class="text-primary mr-2">
                    @{
                        var avgRating = Model.ProductViewModel.FirstOrDefault()?.AvgRating ?? 0;
                        int fullStars = (int)avgRating;
                        bool hasHalfStar = (avgRating - fullStars) >= 0.5;
                    }
                    @for (int i = 0; i < fullStars; i++)
                    {
                        <small class="fas fa-star"></small>
                    }
                    @if (hasHalfStar)
                    {
                        <small class="fas fa-star-half-alt"></small>
                    }
                    @for (int i = fullStars + (hasHalfStar ? 1 : 0); i < 5; i++)
                    {
                        <small class="far fa-star"></small>
                    }
                </div>
                <small class="pt-1" style="color: black; font-size: 18px">(@avgRating.ToString("0.0", System.Globalization.CultureInfo.InvariantCulture))</small>
            </div>

            <h3 class="font-weight-semi-bold mb-4">
                @{
                    var products = Model.ProductViewModel.FirstOrDefault();
                    if (products.StockQuantity == 0 || products.Price == 0)
                    {
                        <div class="text-danger">
                            <span>Hết hàng</span>
                            <br />
                            <span><a href="#">Liên hệ để biết thêm chi tiết</a></span>
                        </div>
                    }
                    if (products.Status == false)
                    {
                        <div class="text-danger">
                            <span>Sản phẩm đã ngừng kinh doanh</span>
                            <br />
                            <span>Liên hệ để biết thêm chi tiết</span>
                        </div>
                    }
                    else
                    {
                        var activePromotions = Model.PromotionViewModel
                            .Where(p => p.StartDate.Date <= DateTime.Now.Date && p.EndDate.Date >= DateTime.Now.Date)
                            .ToList();
                        if (products.PromotionPrice < products.Price)
                        {
                            <span style="color: forestgreen">@string.Format("{0:N0}", products.PromotionPrice) VND</span>
                            <del style="margin-left: 5px; color: gray">@string.Format("{0:N0}", products.Price) VND</del>
                        }
                        else
                        {
                            <span style="color: forestgreen">@string.Format("{0:N0}", products.Price) VND</span>
                        }
                    }
                }
            </h3>
            @*<div class="d-flex mb-3">
                    <p class="text-dark font-weight-medium mb-0 mr-3">Sizes:</p>
                    <form>
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" class="custom-control-input" id="size-1" name="size">
                            <label class="custom-control-label" for="size-1">XS</label>
                        </div>
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" class="custom-control-input" id="size-2" name="size">
                            <label class="custom-control-label" for="size-2">S</label>
                        </div>
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" class="custom-control-input" id="size-3" name="size">
                            <label class="custom-control-label" for="size-3">M</label>
                        </div>
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" class="custom-control-input" id="size-4" name="size">
                            <label class="custom-control-label" for="size-4">L</label>
                        </div>
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" class="custom-control-input" id="size-5" name="size">
                            <label class="custom-control-label" for="size-5">XL</label>
                        </div>
                    </form>
                </div>
                <div class="d-flex mb-4">
                    <p class="text-dark font-weight-medium mb-0 mr-3">Colors:</p>
                    <form>
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" class="custom-control-input" id="color-1" name="color">
                            <label class="custom-control-label" for="color-1">Black</label>
                        </div>
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" class="custom-control-input" id="color-2" name="color">
                            <label class="custom-control-label" for="color-2">White</label>
                        </div>
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" class="custom-control-input" id="color-3" name="color">
                            <label class="custom-control-label" for="color-3">Red</label>
                        </div>
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" class="custom-control-input" id="color-4" name="color">
                            <label class="custom-control-label" for="color-4">Blue</label>
                        </div>
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" class="custom-control-input" id="color-5" name="color">
                            <label class="custom-control-label" for="color-5">Green</label>
                        </div>
                    </form>
                </div>*@
            @if (products.StockQuantity > 0 && products.Status == true)
            {
                <div class="d-flex align-items-center mb-4 pt-2">
                    <div class="input-group quantity mr-3" style="width: 130px;">
                        <div class="input-group-btn">
                            <button class="btn btn-primary btn-minus">
                                <i class="fa fa-minus"></i>
                            </button>
                        </div>
                        <input type="number" class="form-control bg-secondary text-center"
                               value="1" min="1" max="@products.StockQuantity" style="padding: 2px">
                        <div class="input-group-btn">
                            <button class="btn btn-primary btn-plus">
                                <i class="fa fa-plus"></i>
                            </button>
                        </div>
                    </div>

                    <a href="#" class="btn btn-primary px-3 addToCartLink" data-product-id="@products.ProductId" data-stock-quantity="@products.StockQuantity">
                        <i class="fas fa-shopping-cart mr-1"></i>Thêm Vào Giỏ Hàng
                    </a>
                </div>
            }



            @*<div class="d-flex pt-2">
                    <p class="text-dark font-weight-medium mb-0 mr-2">Share on:</p>
                    <div class="d-inline-flex">
                        <a class="text-dark px-2" href="">
                            <i class="fab fa-facebook-f"></i>
                        </a>
                        <a class="text-dark px-2" href="">
                            <i class="fab fa-twitter"></i>
                        </a>
                        <a class="text-dark px-2" href="">
                            <i class="fab fa-linkedin-in"></i>
                        </a>
                        <a class="text-dark px-2" href="">
                            <i class="fab fa-pinterest"></i>
                        </a>
                    </div>
                </div>*@
        </div>
    </div>
    <div class="row px-xl-5">
        <div class="col">
            <div class="nav nav-tabs justify-content-center border-secondary mb-4">
                <a class="nav-item nav-link active" data-toggle="tab" href="#tab-pane-1">Mô tả</a>
                <a class="nav-item nav-link" data-toggle="tab" href="#tab-pane-2">Thông tin</a>
                <a class="nav-item nav-link" data-toggle="tab" href="#tab-pane-3">Đánh giá (@Model.ReviewViewModel.Count())</a>
            </div>
            <div class="tab-content">
                <div class="tab-pane fade show active" id="tab-pane-1">
                    <h4 class="mb-3">Mô tả sản phẩm</h4>
                    @Html.Raw(Model.ProductViewModel.FirstOrDefault().Description)
                </div>
                <div class="tab-pane fade" id="tab-pane-2">
                    <h4 class="mb-3">Thông tin chi tiết</h4>
                    <div class="row">
                        <div class="col-md-12">
                            <table class="table table-borderless">
                                <tbody>
                                    @{
                                        var groupedAttributes = Model.ProductViewModel.FirstOrDefault().Attributes
                                            .GroupBy(attr => attr.AttributeName)
                                            .ToList();
                                    }
                                    @foreach (var group in groupedAttributes)
                                    {
                                        <tr>
                                            <th class="px-0" style="width: 50%;">
                                                @group.Key
                                            </th>
                                            <td class="px-0">
                                                @string.Join(", ", group.Select(attr => attr.Value))
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="tab-pane fade" id="tab-pane-3">
                    <h4 class="mb-3">Đánh giá sản phẩm</h4>
                    @if (Model.ReviewViewModel.FirstOrDefault() != null && Model.ProductViewModel.Any())
                    {
                <div class="reviews">
                    @foreach (var review in Model.ReviewViewModel.OrderByDescending(o => o.CreatedAt))
                    {
                        <div class="review-item border-bottom mb-3 pb-3 d-flex">
                            <!-- Hình ảnh bên trái -->
                            <div class="review-avatar mr-3">
                                @if (string.IsNullOrEmpty(review.AvtUrl))
                                {
                                    <img src="/Public/img/icons/icons8-male-user-100.png" alt="Avatar" class="rounded-circle" style="width: 40px; height: 40px;" />
                                }
                                else
                                {
                                    <img src="@review.AvtUrl" alt="Avatar" class="rounded-circle" style="width: 30px; height: 30px;" />
                                }
                            </div>

                            <!-- Nội dung bên phải -->
                            <div class="review-content flex-grow-1">
                                <!-- Tên người dùng và ngày đánh giá -->
                                <div class="d-flex flex-column mb-2">
                                    @{ 
                                        string displayName = string.Empty;
                                        if (!string.IsNullOrEmpty(review.UserName))
                                        {
                                            if (review.UserName.Length > 1)
                                            {
                                                displayName = review.UserName[0] + new string('*', review.UserName.Length - 2) + review.UserName[review.UserName.Length - 1];
                                            }
                                            else
                                            {
                                                displayName = review.UserName;
                                            }
                                        } 
                                    }
                                    <h5 class="mb-1" style="font-size: 14px">@displayName</h5>
                                    <!-- Xếp hạng sao -->
                                    <div class="rating mb-1">
                                        @for (var i = 0; i < review.Rating; i++)
                                        {
                                            <i class="fa fa-star text-warning" style="font-size: 14px"></i>
                                        }
                                        @for (var i = review.Rating; i < 5; i++)
                                        {
                                            <i class="fa fa-star text-muted" style="font-size: 14px"></i>
                                        }
                                    </div>
                                    <span class="text-muted" style="font-size: 0.875rem;">@review.CreatedAt.ToString("dd-MM-yyyy HH:mm")</span>
                                </div>


                                <!-- Nội dung đánh giá -->
                                <p class="mb-0" style="color:black">@review.ReviewContent</p>
                            </div>
                        </div>
                    }
                </div>
                    }
                    else
                    {
                        <p class="text-muted">Chưa có đánh giá nào cho sản phẩm này.</p>
                    }


                </div>

            </div>
        </div>
    </div>
</div>
<!-- Shop Detail End -->
<!-- Products Start -->
<div class="container-fluid py-5">
    <div class="text-center mb-4">
        <h2 class="section-title px-5"><span class="px-2">Các sản phẩm tương tự</span></h2>
    </div>
    <div class="row px-xl-5">
        <div class="col">
            <div class="owl-carousel related-carousel">
                @foreach (var product in Model.RelatedProducts)
                {
                    <div class="card product-item border-0">
                        <div class="card-header product-img position-relative overflow-hidden bg-transparent border p-0">
                            <img class="img-fluid w-100" src="@(product.Images.FirstOrDefault()?.ImageUrl ?? "img/default-product.jpg")" alt="">
                        </div>
                        <div class="card-body border-left border-right text-center p-0 pt-4 pb-3">
                            <h6 class="text-truncate mb-3">@product.ProductName</h6>
                            <div class="d-flex justify-content-center">
                                @if (product.StockQuantity == 0)
                                {
                                    <div class="text-danger">
                                        <span>Hết hàng</span>
                                        <br />
                                        <span>Liên hệ để biết thêm chi tiết</span>
                                    </div>
                                }
                                else
                                {
                                    var activePromotions = Model.PromotionViewModel
                                        .Where(p => p.StartDate.Date <= DateTime.Now.Date && p.EndDate.Date >= DateTime.Now.Date)
                                        .ToList();
                                    if (product.PromotionPrice < product.Price)
                                    {
                                        <span style="color: forestgreen">@string.Format("{0:N0}", product.PromotionPrice) VND</span>
                                        <del style="margin-left: 5px; color: gray">@string.Format("{0:N0}", product.Price) VND</del>
                                    }
                                    else
                                    {
                                        <span style="color: forestgreen">@string.Format("{0:N0}", product.Price) VND</span>
                                    }
                                }
                            </div>
                        </div>
                        <div class="card-footer d-flex justify-content-between bg-light border">
                            <a href="@Url.Action("Details", "ProductClient", new { id = product.ProductId })" class="btn btn-sm text-dark p-0">
                                <i class="fas fa-eye text-primary mr-1"></i>Xem chi tiết
                            </a>
                            <a href="#" class="btn btn-sm text-dark p-0 addToCartLink" data-product-id="@product.ProductId">
                                <i class="fas fa-shopping-cart text-primary mr-1"></i>Thêm Vào Giỏ Hàng
                            </a>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<!-- Products End -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Lấy cart_id từ sessionStorage
        var user = sessionStorage.getItem("user");
        var cartId = user ? JSON.parse(user).CartID : null;

        // Lấy tất cả các phần tử có class 'addToCartLink'
        var addToCartLinks = document.getElementsByClassName("addToCartLink");

        // Duyệt qua tất cả các phần tử
        for (var i = 0; i < addToCartLinks.length; i++) {
            var addToCartLink = addToCartLinks[i]; // Lấy từng phần tử trong danh sách

            // Gắn sự kiện click cho từng link
            addToCartLink.addEventListener("click", function (event) {
                event.preventDefault();

                var productId = this.getAttribute("data-product-id");
                var quantityInput = this.parentElement.querySelector(".quantity input");
                var quantity = quantityInput && quantityInput.value ? parseInt(quantityInput.value, 10) : 1;

                // Get stock quantity from data attribute (you'll need to add this to your HTML)
                var stockQuantity = parseInt(this.getAttribute("data-stock-quantity"), 10);

                // Validate quantity
                if (quantity > stockQuantity) {
                    showNotification(`Chỉ còn ${stockQuantity} sản phẩm trong kho`, "warning");
                    return;
                }

                if (quantity <= 0) {
                    showNotification("Số lượng phải lớn hơn 0", "warning");
                    return;
                }

                // Continue with existing cart logic
                if (cartId != null) {
                    fetch('/Cart/AddToCart', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value // CSRF Token
                        },
                        body: JSON.stringify({ cart_id: cartId, productId: productId, quantity: quantity })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                showNotification(data.message, "success"); // Hiển thị thông báo thành công
                                displayUserName();
                            } else {
                                showNotification(data.message, "danger"); // Hiển thị thông báo lỗi
                            }
                        })
                        .catch(error => {
                            console.error("Error:", error);
                            showNotification("Đã xảy ra lỗi khi thêm sản phẩm vào giỏ hàng.", "danger");
                        });
                } else {
                    // Nếu không có cartId trong sessionStorage, chuyển hướng đến trang đăng nhập
                    console.log("Cart ID is not available in session storage.");
                    window.location.href = "/Auth/Login"; // Chuyển hướng đến trang đăng nhập
                }
            });
        }

        // Hàm hiển thị thông báo
        function showNotification(message, messageType) {
            // Tạo phần tử HTML cho thông báo
            var notificationContainer = document.getElementById("notification-container");
            if (!notificationContainer) {
                // Nếu container chưa tồn tại, tạo container mới
                notificationContainer = document.createElement("div");
                notificationContainer.id = "notification-container";
                notificationContainer.style.position = "fixed";
                notificationContainer.style.top = "20px";
                notificationContainer.style.right = "20px";
                notificationContainer.style.zIndex = "1050";
                document.body.appendChild(notificationContainer);
            }

            var notification = document.createElement("div");
            notification.className = `alert alert-dark-${messageType} alert-dismissible fade show`;
            notification.innerHTML = `
                <button type="button" class="close" data-dismiss="alert">&times;</button>
                ${message}
            `;

            // Thêm thông báo vào container
            notificationContainer.appendChild(notification);

            // Tự động xóa thông báo sau 3 giây
            setTimeout(function () {
                notification.remove();
            }, 3000);
        }
    });
</script>
