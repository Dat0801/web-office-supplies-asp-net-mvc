@using PagedList.Mvc;
@using PagedList;
@model IPagedList<VanPhongPham.Models.OrderViewModel>
@using VanPhongPham.Models

@{
    var orderStatusList = ViewBag.OrderStatus as List<VanPhongPham.Models.order_status>;
    var currentStatusId = ViewBag.CurrentStatus?.ToString();
    var MaTaiKhoan = ViewBag.MaTaiKhoan;
}

<link rel="stylesheet" type="text/css" href="~/Public/css/snippets.css">

<style>
    .order-status-tabs .nav-tabs {
        display: flex;
        flex-wrap: nowrap;
        border-bottom: 1px solid #ddd;
    }

        .order-status-tabs .nav-tabs .nav-link {
            color: #333;
            font-weight: bold;
            padding: 10px 0;
            border: none;
        }

            .order-status-tabs .nav-tabs .nav-link.active {
                color: #ff4747;
                border-bottom: 3px solid #ff4747;
            }

    .order-container {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 8px;
        margin-bottom: 15px;
        padding: 20px;
        position: relative;
    }

    .order-status {
        position: absolute;
        top: 10px;
        right: 20px;
        color: #ff4747;
        font-size: 14px;
    }

    .order-status2 {
        position: absolute;
        top: 10px;
        right: 170px;
        color: #26AA99;
        font-size: 14px;
    }

    .order-status3 {
        position: absolute;
        top: 10px;
        right: 150px;
        color: black;
        font-size: 14px;
    }

    .order-status4 {
        position: absolute;
        top: 10px;
        right: 140px;
        color: black;
        font-size: 14px;
    }

    .order-details, .order-actions {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 10px 0;
    }

    .product-info {
        display: flex;
        align-items: center;
        gap: 15px;
    }

        .product-info img {
            width: 80px;
            height: auto;
            border: 1px solid #ddd;
        }

    .price-info {
        text-align: right;
        color: #ff4747;
    }

    .order-details {
        cursor: pointer;
    }

    .order-actions button {
        background-color: #ff4747;
        font-size: 14px;
        color: #fff;
        padding: 8px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .order-actions .btn-outline-secondary {
        background-color: #ffffff;
        color: #555;
        border: 1px solid rgba(0, 0, 0, 0.09);
    }

    .review-textarea {
        width: 100%;
        padding: 8px;
        resize: none;
        font-size: 14px;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-top: 8px;
    }

    .modal-dialog {
        max-width: 700px; /* Đặt chiều rộng mong muốn cho modal */
        width: 90%; /* Điều chỉnh theo ý thích */
    }

    .modal-body {
        max-height: 600px; /* Giới hạn chiều cao modal body */
        overflow-y: auto; /* Bật thanh cuộn dọc */
    }

    /* Căn chỉnh chữ "Chất lượng sản phẩm" và các ngôi sao đánh giá ngang nhau */
    .rating-container {
        display: flex;
        align-items: center;
        justify-content: space-between; /* Căn chỉnh đều giữa các phần tử */
        margin-top: 10px;
    }

        .rating-container p {
            margin: 0;
            font-weight: bold;
            color: #333;
        }

        .rating-container .rating {
            display: flex;
            gap: 5px;
        }

    .rating input[type="radio"] {
        display: none; /* Ẩn input */
    }

    .rating label {
        font-size: 20px;
        cursor: pointer;
    }

    .messagesmodal {
        display: none; /* Mặc định là ẩn */
        position: fixed;
        top: 20px; /* Đưa lên trên một chút */
        left: 50%;
        transform: translateX(-50%);
        width: 200px;
        background-color: rgba(0, 0, 0, 0.8); /* Màu nền đen nhạt */
        color: white; /* Chữ màu trắng */
        border-radius: 5px;
        font-size: 14px;
        z-index: 9999;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .search-bar-container {
        display: flex;
        justify-content: center; /* Canh giữa nội dung */
        align-items: center;
        background-color: #f5f5f5; /* Màu nền */
        border: 1px solid #ddd; /* Viền */
        border-radius: 5px;
        padding: 5px 15px; /* Khoảng cách bên trong */
        max-width: 100%; /* Độ rộng tối đa */
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Hiệu ứng bóng */
    }

    .search-form {
        display: flex; /* Đặt các phần tử trong form theo hàng ngang */
        align-items: center;
        width: 100%; /* Form chiếm toàn bộ chiều rộng container */
    }

    .search-input {
        flex: 1; /* Input chiếm không gian còn lại */
        border: none; /* Không viền */
        outline: none; /* Bỏ đường viền khi focus */
        font-size: 15px;
        padding: 5px 10px; /* Khoảng cách trong input */
        color: #333;
        background-color: transparent;
        height: 30px;
    }

        .search-input::placeholder {
            color: #aaa; /* Màu placeholder */
        }

    .search-button {
        background: none; /* Nền trong suốt */
        border: none; /* Không viền */
        outline: none; /* Bỏ đường viền focus */
        cursor: pointer; /* Thay đổi con trỏ thành pointer */
        color: #888; /* Màu mặc định */
        font-size: 16px;
        margin-left: 10px; /* Khoảng cách giữa input và nút */
    }

        .search-button:hover {
            color: #333; /* Màu khi hover */
        }

        .search-button i {
            display: flex;
            align-items: center;
            justify-content: center;
        }

    .pagination-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .pagination li {
        margin: 0 5px;
    }

    .pagination .page-link {
        color: #777777; /* Màu chữ mặc định */
        padding: 8px 12px;
        border: none;
        border-radius: 8px;
        transition: background-color 0.3s, color 0.3s;
        text-decoration: none;
    }

        .pagination .page-link:hover {
            background-color: #f0f0f0; /* Màu nền khi hover */
            color: #333; /* Màu chữ khi hover */
        }

    .pagination .active .page-link {
        background-color: #ff5733; /* Màu nền cho trang hiện tại */
        color: #fff; /* Màu chữ cho trang hiện tại */
        cursor: default; /* Con trỏ chuột mặc định khi active */
        pointer-events: none; /* Vô hiệu hóa hover */
    }

    .pagination-container nav ul.pagination li a,
    .pagination-container nav ul.pagination li span {
        padding: 8px 12px;
        margin: 0 5px;
        color: #B4B2B2;
        font-weight: 700;
        text-decoration: none;
    }

    .pagination-container nav ul.pagination li.active span,
    .pagination-container nav ul.pagination li.active a {
        background-color: #e91e63; /* Màu nền cho trang hiện tại */
        color: #fff;
        pointer-events: none; /* Vô hiệu hóa hover */
    }

    .pagination-container nav ul.pagination li a:hover {
        color: #e91e63;
    }
</style>

<div class="order-status-tabs">
    <ul class="nav nav-tabs justify-content-between w-100">
        <li class="nav-item flex-fill text-center">
            <a style="font-weight: normal; font-size: 17px;" class="nav-link @(currentStatusId == "-1" ? "active" : "")"
               href="@Url.Action("Index", "Profile", new { order_status_id = -1, MaTaiKhoan, view = "OrderPartial" })">
                Tất cả
            </a>
        </li>
        @if (orderStatusList != null)
        {
            foreach (var status in orderStatusList)
            {
                <li class="nav-item flex-fill text-center">
                    <a style="font-weight: normal; font-size: 17px;" class="nav-link @(currentStatusId == status.order_status_id.ToString() ? "active" : "")"
                       href="@Url.Action("Index", "Profile", new { order_status_id = status.order_status_id, MaTaiKhoan, view = "OrderPartial" })">
                        @status.order_status_name
                    </a>
                </li>
            }
        }
    </ul>
</div>

<div class="search-bar-container mt-3">
    <form class="search-form" action="@Url.Action("Index", "Profile")" method="get">
        <input type="hidden" name="order_status_id" value="@ViewBag.CurrentStatus" />
        <input type="hidden" name="MaTaiKhoan" value="@MaTaiKhoan" />
        <input type="hidden" name="view" value="OrderPartial" />
        <input type="text" class="search-input" name="search_str" placeholder="Bạn có thể tìm kiếm theo ID đơn hàng hoặc Tên sản phẩm" value="@(ViewBag.SearchStr ?? "")" />
        <button type="submit" class="search-button">
            <i class="fa fa-search"></i>
        </button>
    </form>
</div>

<div id="order-details-container" class="mt-3">
    @if (Model != null && Model.Any())
    {
        foreach (var order in Model)
        {
            <div class="order-container">
                @if (order.OrderStatusName != "Đã hủy")
                {
                    <div class="order-status2" id="order_statusGHN" data-ordercode="@(string.IsNullOrEmpty(order.OrderCode) ? "" : order.OrderCode)" data-orderid="@order.OrderId" data-orderstatusname="@order.OrderStatusName" data-cancelrequested="@order.CancellationRequested">
                        <i class="fa fa-exclamation-circle" style="color: #26AA99; font-size: 13px; margin-right: 6px;"></i>
                    </div>

                    if (order.OrderStatusName == "Chờ giao hàng")
                    {
                        <div class="order-status3">|</div>
                    }
                    else
                    {
                        <div class="order-status4">|</div>
                    }
                }

                <div class="order-status">@order.OrderStatusName.ToUpper()</div>
                <hr />

                @{
                    var checkReview = false;
                }
                @foreach (var detail in order.OrderDetails)
                {
                    <a style="text-decoration: none; color: #555 " href="@Url.Action("Index", "Profile", new { order_status_id = currentStatusId, MaTaiKhoan, view = "OrderDetailsPartial", ord_id = order.OrderId })">
                        <div class="order-details">
                            <div class="product-info">
                                <img src="@detail.ImageUrl" alt="Product Image" />
                                <div style="display: block; width: 700px; align-items: center;">
                                    <div class="product-name" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: calc(100% - 110px); color: #272727;">@detail.ProductName</div>
                                    <div style="color: #272727;"><span>x</span>@detail.Quantity</div>
                                </div>
                            </div>
                            @if (detail.Promotion_Price == 0)
                            {
                                <span class="price-info" style="color: #272727;">₫@detail.Price.ToString("N0")</span>
                            }
                            else
                            {
                                <span class="price-info"><del style="margin-right:10px; color: #777777">₫@detail.Price.ToString("N0")</del>₫@detail.Promotion_Price.ToString("N0")</span>
                            }
                        </div>
                    </a>
                    if (detail.isReviewed)
                    {
                        checkReview = true;
                    }
                }
                <hr />
                <div class="d-flex justify-content-end">
                    <span style="color: #272727;">Thành tiền: <span class="price-info" style="font-size: 24px">₫@(order.TotalAmount.HasValue ? order.TotalAmount.Value.ToString("N0") : "0")</span></span>
                </div>
                @if (order.OrderStatusName == "Đã hủy")
                {
                    if (order.CancellationRequested == 4)
                    {
                        <div class="order-actions d-flex justify-content-start mt-2" style="font-size: 12px">
                            <p>Đã hủy bởi người bán</p>
                        </div>
                    }
                    else
                    {
                        <div class="order-actions d-flex justify-content-start mt-2" style="font-size: 12px">
                            <p>Đã hủy bởi bạn</p>
                        </div>
                    }
                }
                else
                {
                    <div class="order-actions d-flex justify-content-end align-items-center justify-content-between mt-2">
                        @if (order.OrderStatusName == "Chờ xác nhận")
                        {
                            <button class="btn btn-danger ml-auto setOrderStatusOne" data-orderid="@order.OrderId" data-ordercreatat="@order.CreatedAt">
                                Hủy Đơn Hàng
                            </button>
                        }
                        else if (order.OrderStatusName == "Chờ giao hàng")
                        {
                            <button class="btn btn-danger ml-auto" id="btnCustom">
                            </button>
                        }
                        else if (order.OrderStatusName == "Hoàn thành" && !checkReview)
                        {
                            <button class="btn btn-danger ml-auto" data-bs-toggle="modal" data-bs-target="#reviewModal-@order.OrderId" data-orderid="@order.OrderId">Đánh Giá</button>
                        }
                    </div>
                }
            </div>

            <!-- Modal đánh giá cho từng đơn hàng -->
            <div id="reviewModal-@order.OrderId" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="reviewLabel-@order.OrderId" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="reviewLabel-@order.OrderId">Đánh Giá Sản Phẩm</h5>
                        </div>
                        <div class="modal-body">
                            <form id="reviewForm-@order.OrderId" method="post" action="@Url.Action("SubmitReview", "Order")">
                                @foreach (var detail in order.OrderDetails)
                                {
                                    <div class="form-group">
                                        <div class="product-info">
                                            <img src="@detail.ImageUrl" alt="Product Image" />
                                            <div>
                                                <div class="product-name">@detail.ProductName</div>
                                            </div>
                                        </div>
                                        <div class="rating-container">
                                            <p>Chất lượng sản phẩm</p>
                                            <div class="rating">
                                                @for (int i = 5; i >= 1; i--)
                                                {
                                                    <input type="radio" name="ratings[@detail.ProductID]" value="@i" id="rating-@i-@detail.ProductID-@order.OrderId">
                                                    <label for="rating-@i-@detail.ProductID-@order.OrderId">☆</label>
                                                }
                                            </div>
                                        </div>
                                        <label for="reviewContent-@detail.ProductID-@order.OrderId">Nội dung đánh giá</label>
                                        <textarea id="reviewContent-@detail.ProductID-@order.OrderId" name="reviewContents[@detail.ProductID]" class="review-textarea" maxlength="50" placeholder="Nhập nội dung đánh giá, tối đa 50 ký tự"></textarea>
                                    </div>
                                    <hr style="border-top: 2px solid #ff4747; opacity: 0.7;" />
                                }
                                <input type="hidden" name="user_id" value="@order.CustomerId" />
                                <input type="hidden" name="currentStatusId" value="@currentStatusId" />
                                <input type="hidden" name="orderId" value="@order.OrderId" />
                                <div class="modal-footer">
                                    <button type="submit" class="btn btn-danger btn">Hoàn thành</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }
        <div class="pagination-container d-flex justify-content-center mt-4">
            <nav>
                <ul class="pagination">
                    @Html.PagedListPager(
                        Model,
                        page => Url.Action("Index", "Profile", new { order_status_id = currentStatusId, MaTaiKhoan, view = "OrderPartial", page }),
                        new PagedListRenderOptions
                        {
                            DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
                            DisplayLinkToNextPage = PagedListDisplayMode.Always,
                            DisplayEllipsesWhenNotShowingAllPageNumbers = true,
                            MaximumPageNumbersToDisplay = 5,
                            Display = PagedListDisplayMode.Always,
                            LinkToPreviousPageFormat = "<img src='/Public/img/icons/icons8-backorder.png' widht='20' height='20'  />",
                            LinkToNextPageFormat = "<img src='/Public/img/icons/icons8-next-100.png' widht='20' height='20' />"
                        }
                    )
                </ul>
            </nav>
        </div>
    }
    else
    {
        <div class="d-flex flex-column align-items-center justify-content-center" style="text-align: center; margin-top: 20px; height: 50vh;">
            <img src="~/Public/img/icons/clipboard.png" style="width: 100px; height: 100px; margin-bottom: 10px" />
            <p>Chưa có đơn hàng.</p>
        </div>
    }
</div>

<div id="MessagesModal" class="messagesmodal" tabindex="-1" role="dialog" aria-labelledby="MessagesModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content" style="background-color: rgba(0, 0, 0, 0.8);">
            <div class="modal-body p-0">
                <p style="text-align: center"></p>
            </div>
        </div>
    </div>
</div>

<!-- Modal nhập lý do hủy -->
<div class="modal fade" id="cancelModal" tabindex="-1" role="dialog" aria-labelledby="cancelModalLabel" aria-hidden="true" data-backdrop="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cancelModalLabel">Nhập lý do hủy</h5>
            </div>
            <div class="modal-body">
                <textarea id="cancelReason" class="review-textarea" style="height: 200px" maxlength="100" placeholder="Nhập nội dung hủy đơn hàng, tối đa 100 ký tự"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" id="confirmCancelBtn" class="btn btn-primary">Xác Nhận</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', async function () {
        const orderContainers = document.querySelectorAll('.order-container');  // Lấy tất cả các đơn hàng

        // Duyệt qua từng đơn hàng
        orderContainers.forEach(async function (orderContainer) {
            const orderstatusGHN = orderContainer.querySelector(".order-status2");
            const ordercode = orderstatusGHN.getAttribute('data-ordercode');
            const orderid = orderstatusGHN.getAttribute('data-orderid');
            const orderstatusname = orderstatusGHN.getAttribute('data-orderstatusname');
            const cancelrequested = orderstatusGHN.getAttribute('data-cancelrequested');

            // Lưu lại phần HTML của icon
            const iconHTML = orderstatusGHN.querySelector('i').outerHTML;

            try {
                const shippingDetail = await getShippingDetail(ordercode); // Lấy thông tin trạng thái từ GHN

                // Cập nhật trạng thái giao hàng từ GHN vào UI
                if (shippingDetail.log && shippingDetail.log.length > 0) {
                    const lastLogEntry = shippingDetail.log[shippingDetail.log.length - 1];
                    orderstatusGHN.innerHTML = iconHTML + getStatusText(lastLogEntry.status); // Hiển thị trạng thái giao hàng cuối cùng
                }
                else if (shippingDetail.status === "ready_to_pick") {
                    orderstatusGHN.innerHTML = iconHTML + "Người bán đang chuẩn bị hàng"; // Hiển thị trạng thái thực tế
                }

                updateBtnCustom(shippingDetail, orderstatusname, orderid, ordercode, orderContainer, cancelrequested); // Cập nhật button cho mỗi đơn hàng
            }
            catch (error)
            {
                orderstatusGHN.innerHTML = iconHTML + "Đơn hàng đã được đặt";
            }
        });
    });

    // Hàm xử lý trạng thái logEntry.status
    function getStatusText(status) {
        switch (status) {
            case 'picking':
                return 'Đang lấy hàng';
            case 'cancel':
                return 'Hủy đơn hàng';
            case 'picked':
                return 'Nhân viên đã lấy hàng';
            case 'storing':
                return 'Hàng đang nằm ở kho';
            case 'transporting':
                return 'Đang luân chuyển hàng';
            case 'sorting':
                return 'Đang phân loại hàng hóa';
            case 'delivering':
                return 'Nhân viên đang giao cho người nhận';
            case 'delivered':
                return 'Giao hàng thành công';
        }
    }

    function updateBtnCustom(shippingDetail, orderstatusname, orderid, ordercode, orderContainer, cancelrequested) {
        const btnCustom = orderContainer.querySelector("#btnCustom");

        if ((shippingDetail.status === "ready_to_pick" || shippingDetail.status === "picking") && orderstatusname === "Chờ giao hàng") {


            if (cancelrequested == 0) {
                btnCustom.setAttribute("data-orderid", orderid);
                btnCustom.setAttribute("data-ordercode", ordercode);
                btnCustom.textContent = "Hủy đơn hàng";

                // Khi bấm nút, mở modal và truyền dữ liệu
                btnCustom.onclick = function () {
                    const cancelModal = document.getElementById("cancelModal");
                    const confirmCancelBtn = document.getElementById("confirmCancelBtn");
                    const cancelReason = document.getElementById("cancelReason");

                    cancelReason.value = "";

                    // Truyền dữ liệu vào nút xác nhận trong modal
                    confirmCancelBtn.setAttribute("data-orderid", orderid);
                    confirmCancelBtn.setAttribute("data-ordercode", ordercode);

                    // Mở modal
                    const bootstrapModal = new bootstrap.Modal(cancelModal);
                    bootstrapModal.show();

                    document.body.style.overflowY = "scroll";
                };
            }
            else if (cancelrequested == 1) {
                btnCustom.classList.add("disabled");
                btnCustom.textContent = "Đã gửi yêu cầu hủy đơn hàng";
                btnCustom.onclick = null;
            }
            else if (cancelrequested == 2) {
                btnCustom.classList.add("disabled");
                btnCustom.textContent = "Yêu cầu hủy đơn hàng bị từ chối";
                btnCustom.onclick = null;
            }

        }
        else if (shippingDetail.status === "delivered" && orderstatusname === "Chờ giao hàng") {
            btnCustom.setAttribute("data-orderid", orderid);
            btnCustom.setAttribute("data-ordercode", ordercode);
            btnCustom.textContent = "Đã nhận hàng";
            btnCustom.onclick = function () {
                setOrderStatusTwo(this); // Gọi hàm xác nhận đã nhận hàng
            };
        }
        else if (shippingDetail.status !== "ready_to_pick" && shippingDetail.status !== "picking" && shippingDetail.status !== "delivered" && orderstatusname === "Chờ giao hàng") {
            btnCustom.classList.add("disabled");
            btnCustom.textContent = "Hủy đơn hàng";
            btnCustom.onclick = null;
        }
    }

    document.getElementById("confirmCancelBtn").onclick = async function () {
        const orderId = this.getAttribute("data-orderid");
        const cancelReason = document.getElementById("cancelReason").value.trim();

        if (!cancelReason) {
            const modalBody = document.querySelector("#MessagesModal .modal-body p");
            modalBody.textContent = `Để gửi, hãy thêm lý do.`; // Thông báo lỗi

            // Hiển thị modal với jQuery
            $("#MessagesModal").modal("show");

            // Tự động tắt modal sau 3 giây
            setTimeout(function () {
                $("#MessagesModal").modal("hide");
            }, 1500);

            // Khôi phục thanh cuộn khi modal mở
            document.body.style.overflowY = "scroll"; // Đảm bảo trang có thể cuộn lại

            return;
        }

        try
        {
            // Gửi yêu cầu cập nhật trạng thái hủy đơn hàng lên server
            const response = await fetch('/Order/RequestCancellation', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        order_id: orderId,
                        cancelReason: cancelReason
                    })
                });

            const result = await response.json();

            if (result.success)
            {
                location.reload(); // Reload lại trang để cập nhật UI
            }
            else
            {
                alert(result.message);
            }
        }
        catch (error) {
            console.error("Lỗi trong quá trình gửi yêu cầu:", error);
            alert("Không thể gửi yêu cầu hủy đơn hàng. Vui lòng thử lại.");
        }
    };

    async function setOrderStatusTwo(button) {
        const orderId = button.getAttribute('data-orderid');  // Lấy orderId từ nút được nhấn
        const ordercode1 = button.getAttribute('data-ordercode');

        const shippingDetail1 = await getShippingDetail(ordercode1);

        // Gọi hàm đổi trạng thái đơn hàng
        const response = await fetch('/Order/ChangeOrder_OrderStatus', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                order_id: orderId,
                order_status: 2,
                finishdate: new Date(shippingDetail1.finish_date).toISOString()
            })
        });

        const result = await response.json();

        if (result.success) {
            // Điều hướng đến trang khác sau khi cập nhật trạng thái
            const url = `@Url.Action("Index", "Profile")?order_status_id=${'@currentStatusId'}&MaTaiKhoan=${'@MaTaiKhoan'}&view=OrderPartial`;
            window.location.href = url;
        }
        else
        {
            alert(result.message);
        }
    }

    document.querySelectorAll('.setOrderStatusOne').forEach(function (button) {
        button.addEventListener('click', async function () {
            const orderId = this.getAttribute('data-orderid');

            // Gọi hàm đổi trạng thái đơn hàng
            const response = await fetch('/Order/ChangeOrder_OrderStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    order_id: orderId,
                    order_status: 1
                })
            });

            const result = await response.json();
            if (result.success) {
                location.reload();
            }
            else {
                alert(result.message);
            }
        });
    });
    // Lắng nghe sự kiện mở modal
    document.querySelectorAll('[data-bs-toggle="modal"]').forEach(function (button) {
        button.addEventListener('click', function () {
            // Lấy ID của modal từ thuộc tính data-target
            var targetModalId = this.getAttribute('data-bs-target');
            // Tìm modal theo ID và reset nội dung
            var modal = document.querySelector(targetModalId);
            if (modal) {
                var form = modal.querySelector('form');
                if (form) {
                    form.reset(); // Reset form
                }
                document.body.style.overflowY = "scroll";
            }
        });
    });

    document.querySelectorAll('.modal-footer button[type="submit"]').forEach(function (button) {
        button.addEventListener('click', function (event) {
            var form = this.closest('form');
            var isValid = true;

            // Kiểm tra tất cả các radio button (rating)
            form.querySelectorAll('.rating input[type="radio"]').forEach(function (radioGroup) {
                var ratingSelected = false;
                // Kiểm tra nếu một trong các radio button trong nhóm này được chọn
                radioGroup.closest('.rating').querySelectorAll('input[type="radio"]').forEach(function (radio) {
                    if (radio.checked) {
                        ratingSelected = true;
                    }
                });
                // Nếu không có radio button nào được chọn
                if (!ratingSelected) {
                    isValid = false;
                }
            });

            // Kiểm tra tất cả các textarea (review content)
            form.querySelectorAll('textarea').forEach(function (textarea) {
                if (textarea.value.trim() === "") {
                    isValid = false;
                }
            });

            // Nếu không hợp lệ, ngừng gửi form
            if (!isValid) {
                const modalBody = document.querySelector("#MessagesModal .modal-body p");
                modalBody.textContent = `Để gửi, hãy thêm đánh giá.`; // Thông báo lỗi

                // Hiển thị modal với jQuery
                $("#MessagesModal").modal("show");

                // Tự động tắt modal sau 3 giây
                setTimeout(function () {
                    $("#MessagesModal").modal("hide");
                }, 1500);

                // Khôi phục thanh cuộn khi modal mở
                document.body.style.overflowY = "scroll"; // Đảm bảo trang có thể cuộn lại

                event.preventDefault(); // Ngừng submit form
            }
        });
    });

</script>
