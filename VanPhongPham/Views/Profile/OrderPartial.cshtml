@model IEnumerable<VanPhongPham.Models.OrderViewModel>
@using VanPhongPham.Models

@{
    var orderStatusList = ViewBag.OrderStatus as List<VanPhongPham.Models.order_status>;
    var currentStatusId = ViewBag.CurrentStatus?.ToString();
    var MaTaiKhoan = ViewBag.MaTaiKhoan;
}

<link rel="stylesheet" type="text/css" href="~/Public/css/snippets.css">

<style>
    .order-status-tabs .nav-tabs {
        display: flex;
        flex-wrap: nowrap;
        border-bottom: 1px solid #ddd;
    }

    .order-status-tabs .nav-tabs .nav-link {
        color: #333;
        font-weight: bold;
        padding: 10px 0;
        border: none;
    }

    .order-status-tabs .nav-tabs .nav-link.active {
        color: #ff4747;
        border-bottom: 3px solid #ff4747;
    }

    .order-container {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 8px;
        margin-bottom: 15px;
        padding: 20px;
        position: relative;
    }

    .order-status {
        position: absolute;
        top: 10px;
        right: 20px;
        color: #ff4747;
        font-size: 14px;
    }

    .order-details, .order-actions {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 10px 0;
    }

    .product-info {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .product-info img {
        width: 80px;
        height: auto;
        border: 1px solid #ddd;
    }

    .price-info {
        text-align: right;
        color: #ff4747;
    }

    .order-details {
        cursor: pointer;
    }

    .order-actions button {
        background-color: #ff4747;
        font-size: 14px;
        color: #fff;
        padding: 8px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .order-actions .btn-outline-secondary {
        background-color: #ffffff;
        color: #555;
        border: 1px solid rgba(0, 0, 0, 0.09);
    }

    .review-textarea {
        width: 100%;
        padding: 8px;
        resize: none;
        font-size: 14px;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-top: 8px;
    }
    .modal-dialog {
        max-width: 700px; /* Đặt chiều rộng mong muốn cho modal */
        width: 90%; /* Điều chỉnh theo ý thích */
    }

    .modal-body {
        max-height: 600px;/* Giới hạn chiều cao modal body */
        overflow-y: auto; /* Bật thanh cuộn dọc */
    }

    /* Căn chỉnh chữ "Chất lượng sản phẩm" và các ngôi sao đánh giá ngang nhau */
    .rating-container {
        display: flex;
        align-items: center;
        justify-content: space-between; /* Căn chỉnh đều giữa các phần tử */
        margin-top: 10px;
    }

    .rating-container p {
        margin: 0;
        font-weight: bold;
        color: #333;
    }

    .rating-container .rating {
        display: flex;
        gap: 5px;
    }

    .rating input[type="radio"] {
        display: none; /* Ẩn input */
    }

    .rating label {
        font-size: 20px;
        cursor: pointer;
    }

    .messagesmodal 
    {
        display: none; /* Mặc định là ẩn */
        position: fixed;
        top: 20px; /* Đưa lên trên một chút */
        left: 50%;
        transform: translateX(-50%);
        width: 200px;
        background-color: rgba(0, 0, 0, 0.8); /* Màu nền đen nhạt */
        color: white; /* Chữ màu trắng */
        border-radius: 5px;
        font-size: 14px;
        z-index: 9999;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
</style>

<div class="order-status-tabs">
    <ul class="nav nav-tabs justify-content-between w-100">
        <li class="nav-item flex-fill text-center">
            <a style="font-weight: normal; font-size: 17px;" class="nav-link @(currentStatusId == "-1" ? "active" : "")"
               href="@Url.Action("Index", "Profile", new { order_status_id = -1, MaTaiKhoan, view = "OrderPartial" })">
                Tất cả
            </a>
        </li>
        @if (orderStatusList != null)
        {
            foreach (var status in orderStatusList)
            {
                <li class="nav-item flex-fill text-center">
                    <a style="font-weight: normal; font-size: 17px;" class="nav-link @(currentStatusId == status.order_status_id.ToString() ? "active" : "")"
                       href="@Url.Action("Index", "Profile", new { order_status_id = status.order_status_id, MaTaiKhoan, view = "OrderPartial" })">
                        @status.order_status_name
                    </a>
                </li>
            }
        }
    </ul>
</div>

<div id="order-details-container" class="mt-3">
    @if (Model != null && Model.Any())
    {
        foreach (var order in Model)
        {
            <div class="order-container">
                <div class="order-status">@order.OrderStatusName.ToUpper()</div>
                <hr />

                @{
                    var checkReview = false;
                }
                @foreach (var detail in order.OrderDetails)
                {
                    <a style="text-decoration: none; color: #555 " href="@Url.Action("Index", "Profile", new { order_status_id = currentStatusId, MaTaiKhoan, view = "OrderDetailsPartial", ord_id = order.OrderId })">
                        <div class="order-details">
                            <div class="product-info">
                                <img src="@detail.ImageUrl" alt="Product Image" />
                                <div>
                                    <div class="product-name" style="color: #272727;">@detail.ProductName</div>
                                    <div style="color: #272727;"><span>x</span>@detail.Quantity</div>
                                </div>
                            </div>
                            @if (detail.Promotion_Price == 0)
                            {
                                <span class="price-info" style="color: #272727;">₫@detail.Price.ToString("N0")</span>
                            }
                            else
                            {
                                <span class="price-info"><del style="margin-right:10px; color: #777777">₫@detail.Price.ToString("N0")</del>₫@detail.Promotion_Price.ToString("N0")</span>
                            }
                        </div>
                    </a>
                    if (detail.isReviewed)
                    {
                        checkReview = true;
                    }
                }
                <hr />
                <div class="d-flex justify-content-end">
                    <span style="color: #272727;">Thành tiền: <span class="price-info" style="font-size: 24px">₫@(order.TotalAmount.HasValue ? order.TotalAmount.Value.ToString("N0") : "0")</span></span>
                </div>
                <div class="order-actions d-flex justify-content-end mt-2">
                    @if (order.OrderStatusName == "Chờ xác nhận")
                    {
                        <button class="btn btn-danger setOrderStatusOne" data-orderid="@order.OrderId">Hủy Đơn Hàng</button>
                    }
                    else if (order.OrderStatusName == "Chờ giao hàng")
                    {
                        <button class="btn btn-danger setOrderStatusTwo" data-orderid="@order.OrderId">Đã Nhận Hàng</button>
                    }
                    else if (order.OrderStatusName == "Hoàn thành" && !checkReview)
                    {
                        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#reviewModal-@order.OrderId" data-orderid="@order.OrderId">Đánh Giá</button>
                    }
                </div>
            </div>

            <!-- Modal đánh giá cho từng đơn hàng -->
            <div id="reviewModal-@order.OrderId" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="reviewLabel-@order.OrderId" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="reviewLabel-@order.OrderId">Đánh Giá Sản Phẩm</h5>
                        </div>
                        <div class="modal-body">
                            <form id="reviewForm-@order.OrderId" method="post" action="@Url.Action("SubmitReview", "Order")">
                                @foreach (var detail in order.OrderDetails)
                                {
                                    <div class="form-group">
                                        <div class="product-info">
                                            <img src="@detail.ImageUrl" alt="Product Image" />
                                            <div>
                                                <div class="product-name">@detail.ProductName</div>
                                            </div>
                                        </div>
                                        <div class="rating-container">
                                            <p>Chất lượng sản phẩm</p>
                                            <div class="rating">
                                                @for (int i = 5; i >= 1; i--)
                                                {
                                                    <input type="radio" name="ratings[@detail.ProductID]" value="@i" id="rating-@i-@detail.ProductID-@order.OrderId">
                                                    <label for="rating-@i-@detail.ProductID-@order.OrderId">☆</label>
                                                }
                                            </div>
                                        </div>
                                        <label for="reviewContent-@detail.ProductID-@order.OrderId">Nội dung đánh giá</label>
                                        <textarea id="reviewContent-@detail.ProductID-@order.OrderId" name="reviewContents[@detail.ProductID]" class="review-textarea" maxlength="50" placeholder="Nhập nội dung đánh giá, tối đa 50 ký tự"></textarea>
                                    </div>
                                    <hr style="border-top: 2px solid #ff4747; opacity: 0.7;" />
                                }
                                <input type="hidden" name="user_id" value="@order.CustomerId" />
                                <input type="hidden" name="currentStatusId" value="@currentStatusId" />
                                <input type="hidden" name="orderId" value="@order.OrderId" />
                                <div class="modal-footer">
                                    <button type="submit" class="btn btn-danger btn">Hoàn thành</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="d-flex flex-column align-items-center justify-content-center" style="text-align: center; margin-top: 20px; height: 50vh;">
            <img src="~/Public/img/icons/clipboard.png" style="width: 100px; height: 100px; margin-bottom: 10px" />
            <p>Chưa có đơn hàng.</p>
        </div>
    }
</div>

<div id="MessagesModal" class="messagesmodal" tabindex="-1" role="dialog" aria-labelledby="MessagesModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-dialog-centered" style="background-color: rgba(0, 0, 0, 0.8);" role="document">
        <div class="modal-content" style="background-color: rgba(0, 0, 0, 0.8);">
            <div class="modal-body p-0">
                <p style="text-align: center"></p>
            </div>
        </div>
    </div>
</div>

<script>
    document.querySelectorAll('.setOrderStatusTwo').forEach(function (button) {
        button.addEventListener('click', async function () {
            const orderId = this.getAttribute('data-orderid');

            // Gọi hàm đổi trạng thái đơn hàng
            const response = await fetch('/Order/ChangeOrder_OrderStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    order_id: orderId,
                    order_status: 2
                })
            });

            const result = await response.json();
            if (result.success) {
                location.reload();
            } else {
                alert(result.message);
            }
        });
    });
    
    document.querySelectorAll('.setOrderStatusOne').forEach(function (button) {
        button.addEventListener('click', async function () {
            const orderId = this.getAttribute('data-orderid');

            // Gọi hàm đổi trạng thái đơn hàng
            const response = await fetch('/Order/ChangeOrder_OrderStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    order_id: orderId,
                    order_status: 1
                })
            });

            const result = await response.json();
            if (result.success) {
                location.reload();
            } else {
                alert(result.message);
            }
        });
    });
    // Lắng nghe sự kiện mở modal
    document.querySelectorAll('[data-bs-toggle="modal"]').forEach(function (button) {
        button.addEventListener('click', function () {
            // Lấy ID của modal từ thuộc tính data-target
            var targetModalId = this.getAttribute('data-bs-target');
            // Tìm modal theo ID và reset nội dung
            var modal = document.querySelector(targetModalId);
            if (modal) {
                var form = modal.querySelector('form');
                if (form) {
                    form.reset(); // Reset form
                }
                document.body.style.overflowY = "scroll";
            }
        });
    });

    document.querySelectorAll('.modal-footer button[type="submit"]').forEach(function (button) {
        button.addEventListener('click', function (event) {
            var form = this.closest('form');
            var isValid = true;

            // Kiểm tra tất cả các radio button (rating)
            form.querySelectorAll('.rating input[type="radio"]').forEach(function (radioGroup) {
                var ratingSelected = false;
                // Kiểm tra nếu một trong các radio button trong nhóm này được chọn
                radioGroup.closest('.rating').querySelectorAll('input[type="radio"]').forEach(function (radio) {
                    if (radio.checked) {
                        ratingSelected = true;
                    }
                });
                // Nếu không có radio button nào được chọn
                if (!ratingSelected) {
                    isValid = false;
                }
            });

            // Kiểm tra tất cả các textarea (review content)
            form.querySelectorAll('textarea').forEach(function (textarea) {
                if (textarea.value.trim() === "") {
                    isValid = false;
                }
            });

            // Nếu không hợp lệ, ngừng gửi form
            if (!isValid) {
                const modalBody = document.querySelector("#MessagesModal .modal-body p");
                modalBody.textContent = `Để gửi, hãy thêm đánh giá.`; // Thông báo lỗi

                // Hiển thị modal với jQuery
                $("#MessagesModal").modal("show");

                // Tự động tắt modal sau 3 giây
                setTimeout(function () {
                    $("#MessagesModal").modal("hide");
                }, 1500);

                // Khôi phục thanh cuộn khi modal mở
                document.body.style.overflowY = "scroll"; // Đảm bảo trang có thể cuộn lại

                event.preventDefault(); // Ngừng submit form
            }
        });
    });

</script>
