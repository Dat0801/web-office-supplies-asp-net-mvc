@model VanPhongPham.Models.user_wallet

@{
    var usr = ViewBag.Usr as VanPhongPham.Models.user;
}

<style>
    .wallet-card {
        position: relative;
        border-radius: 20px;
        background: linear-gradient(135deg, #e91e63, #f06292);
        color: white;
        padding: 25px;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        overflow: hidden;
    }

        .wallet-card::before,
        .wallet-card::after {
            content: "";
            position: absolute;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.1);
            z-index: 0;
        }

        .wallet-card::before {
            top: -60px;
            right: -40px;
            width: 200px;
            height: 200px;
        }

        .wallet-card::after {
            bottom: -80px;
            left: -60px;
            width: 250px;
            height: 250px;
        }

    .wallet-card-content {
        position: relative;
        z-index: 1;
    }

    .wallet-card h5,
    .wallet-card h3 {
        margin: 0;
    }

    .wallet-card .wallet-balance {
        font-size: 2.2rem;
        font-weight: bold;
    }

    .wallet-card .wallet-details {
        margin-top: 10px;
    }

    .wallet-card .brand-icon {
        font-size: 2.5rem;
        color: white;
    }

    .wallet-card .wallet-name {
        font-size: 1.2rem;
        font-weight: 500;
    }

    .wallet-footer {
        margin-top: 15px;
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.8);
        text-align: right;
    }
</style>

<script>
    function showNotification(message, messageType) {
        var notificationContainer = document.getElementById("notification-container");
        var notification = document.createElement("div");
        notification.className = `alert alert-${messageType} alert-dismissible fade show`;
        notification.innerHTML = `
                            <button type="button" class="close" data-dismiss="alert">&times;</button>
                            ${message}
                        `;

        notificationContainer.appendChild(notification);

        setTimeout(function () {
            notification.remove();
        }, 2000);
    }
</script>

@if (ViewBag.msg != null)
{
    if (ViewBag.msg == "Nạp tiền thành công!")
    {
        <script>
            showNotification('@ViewBag.msg', "success");
        </script>
    }
    else
    {
        <script>
            showNotification('@ViewBag.msg', "danger");
        </script>
    }
}

<p style="font-size: 20px; font-weight: bold;">Ví QVD</p>
<p style="font-size: 15px;">
    Số dư ví của bạn sẽ hiển thị ở đây.
</p>
<hr />

<div class="row">
    <div class="col-md-6">
        <div class="wallet-card">
            <div class="wallet-card-content">
                <!-- Tên người dùng và thương hiệu -->
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h5 class="text-uppercase fw-bold">@usr.full_name</h5>
                        <span class="wallet-name">QVD Wallet</span>
                    </div>
                    <i class="fas fa-wallet brand-icon"></i>
                </div>

                <!-- Số dư -->
                <div class="wallet-details">
                    <span class="d-block">Số dư hiện tại</span>
                    <h3 class="wallet-balance">
                        @Html.Raw(Model.balance.HasValue ? string.Format("{0:n0}đ", Model.balance) : "0đ")
                    </h3>
                </div>

                <!-- Nút hành động -->
                <div class="mt-4">
                    <!-- Nạp tiền -->
                    <div class="text-left">
                        <button class="btn btn-warning btn-icon rounded-circle p-3" onclick="openDepositModal()">
                            <i class="fas fa-wallet fs-4"></i>
                        </button>
                        <p class="mt-2 text-white">Nạp tiền</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal nhập tiền nạp -->
<div class="modal fade" id="rechargeModal" tabindex="-1" role="dialog" aria-labelledby="rechargeModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rechargeModalLabel">Nạp Tiền Vào Ví QVD</h5>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <p>Số tiền cần nạp</p>
                    <input type="text" class="form-control" id="rechargeInput" />
                    <p style="font-size: 14px; margin-top: 8px">Số tiền tối thiểu cần nạp là 60.000đ, số tiền tối đa cần nạp là 5.000.000đ.</p>
                    <div class="invalid-feedback">Vui lòng nhập số tiền từ 60.000đ đến 5.000.000đ.</div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="rechargeBtn" class="btn btn-primary">Nạp Tiền</button>
            </div>
        </div>
    </div>
</div>

<script>
    function openDepositModal() {
        const rechagreModal = document.getElementById("rechargeModal");

        // Reset trạng thái khi mở modal
        const rechargeInput = document.getElementById("rechargeInput");
        const rechargeBtn = document.getElementById("rechargeBtn");

        rechargeInput.value = ""; // Reset giá trị input
        rechargeInput.classList.remove("is-invalid"); // Ẩn thông báo lỗi
        rechargeBtn.disabled = true; // Vô hiệu hóa nút nạp tiền

        // Mở modal
        const bootstrapModal = new bootstrap.Modal(rechagreModal);
        bootstrapModal.show();

        document.body.style.overflowY = "scroll";
    }

    document.getElementById("rechargeInput").addEventListener("input", function () {
        const rechargeInput = this;
        const rechargeBtn = document.getElementById("rechargeBtn");

        // Xóa các ký tự không phải số
        rechargeInput.value = rechargeInput.value.replace(/\D/g, '');

        // Không cho phép số bắt đầu bằng '0'
        if (rechargeInput.value.startsWith('0')) {
            rechargeInput.value = rechargeInput.value.substring(1);
        }

        // Bật nút nếu giá trị hợp lệ
        const value = parseInt(rechargeInput.value || 0, 10);
        if (value >= 60000 && value <= 5000000)
        {
            rechargeInput.classList.remove("is-invalid");
            rechargeBtn.disabled = false;
        }
        else
        {
            rechargeInput.classList.add("is-invalid");
            rechargeBtn.disabled = true;
        }
    });

    document.getElementById("rechargeBtn").onclick = async function () {
        const value = parseInt(rechargeInput.value || 0, 10);

        const response = await fetch('Checkout/RechargeVNPay', {
            method: "POST",
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                user_id: '@Model.user_id',
                amount: value
            })
        });
        const result = await response.json();
        if (result.success) {
            window.location.href = result.vnpayUrl;
        }
        else if (!result.success) {
            showNotification('Số lượng tồn kho không đủ', 'danger');
        }

    };
</script>
