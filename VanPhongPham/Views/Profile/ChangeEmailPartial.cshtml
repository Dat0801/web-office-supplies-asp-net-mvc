@model VanPhongPham.Models.user

<p style="font-size: 20px; font-weight: bold;">Thay Đổi Địa Chỉ Email</p>
<hr />

<div class="row">
    <div class="alert alert-success" id="emailVerificationMessage" style="display: none;">
    </div>
    <div class="col-md-6">
        <div class="form-group row mb-3">
            <label class="col-sm-4 col-form-label">Địa chỉ email mới</label>
            <div class="col-sm-8">
                <input type="email" class="form-control" name="changeemail" id="changeemail" />
                <div class="invalid-feedback">Vui lòng nhập địa chỉ email hợp lệ.</div>
            </div>
        </div>

        <div class="form-group row">
            <div class="col-sm-8 offset-sm-4">
                <button type="button" id="submitBtn" class="btn btn-danger">Tiếp Theo</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.getElementById('submitBtn').addEventListener('click', async function () {
       let isValid = true;

        const changeemail = document.getElementById('changeemail');
        const emailFeedback = changeemail.parentElement.querySelector('.invalid-feedback');

        // Kiểm tra địa chỉ email mới
        if (changeemail.value.trim() === "") {
            isValid = false;
            changeemail.classList.add("is-invalid");
            emailFeedback.innerText = "Vui lòng nhập địa chỉ email hợp lệ."
            emailFeedback.style.display = 'block';
        }
        else {
            changeemail.classList.remove("is-invalid");
            emailFeedback.style.display = 'none';
        }

        if (isValid)
        {
            const checkemail = await checkEmailExists(changeemail.value.trim());

            if (checkemail) {
                changeemail.classList.add("is-invalid");
                emailFeedback.innerText = "Email đã được đăng ký."
                emailFeedback.style.display = 'block';
            }
            else {
                const idToken = localStorage.getItem('token');

/*                await sendEmailVerification(idToken);*/

                const checkchangeemail = await changeEmail(idToken, changeemail.value.trim());

                if (checkchangeemail) {
                    try {
                        const response = await fetch('/Profile/UpdateEmail', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ user_id: '@Model.user_id', email: changeemail.value.trim() }),
                        });

                        const result = await response.json();

                        if (result.success) {
                            logout();
                        }
                        return result.exists;
                    } catch (error) {
                        console.error("Có lỗi xảy ra khi kiểm tra tên đăng nhập:", error);
                        return false;
                    }
                }
                else {
                    document.getElementById('emailVerificationMessage').classList.remove('alert-success');
                    document.getElementById('emailVerificationMessage').classList.add('alert-danger');
                    document.getElementById('emailVerificationMessage').innerText = "Chưa xác thực email. Vui lòng xác thực email!";
                    document.getElementById('emailVerificationMessage').style.display = 'block';
                }

            }
        }
    });
</script>
