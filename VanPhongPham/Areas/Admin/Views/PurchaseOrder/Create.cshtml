@{
    ViewBag.Title = "Tạo phiếu đặt hàng - Quản trị";
}

<div class="card mb-4">
    <h6 class="card-header">Tạo Phiếu Đặt Hàng</h6>
    <div class="card-body">
        <form method="post" action="@Url.Action("Create", "PurchaseOrder")">
            <div class="form-row">
                <div class="form-group col-md-4">
                    <label for="purchase_order_id">Mã phiếu đặt</label>
                    <input type="text" class="form-control" name="purchase_order_id" readonly
                           value="@(ViewBag.purchase_order_id ?? "")" />
                </div>
                <div class="form-group col-md-4">
                    <label for="supplier_name">Tên Nhà Cung Cấp</label>
                    <select name="supplier_id" class="form-control">
                        @foreach (var supplier in ViewBag.suppliers)
                        {
                            <option value="@supplier.supplier_id">@supplier.supplier_name</option>
                        }
                    </select>
                </div>
                <div class="form-group col-md-4">
                    <label for="employee_name">Tên nhân viên</label>
                    <input type="text" class="form-control" name="employee_name" readonly
                           value="@(ViewBag.user.full_name ?? "")" />
                    <input type="hidden" class="form-control" name="employee_id"
                           value="@(ViewBag.user.user_id ?? "")" />
                </div>
            </div>

            <div id="orderDetailsContainer">
                <div class="order-detail">
                    <div class="form-row">
                        <div class="form-group col-md-4">
                            <label for="productCode">Sản Phẩm</label>
                            <select class="form-control" id="productCode" name="productCode">
                                <option value="">Chọn sản phẩm</option>
                                @foreach (var product in ViewBag.products as SelectList)
                                {
                                    <option value="@product.Value">@product.Text</option>
                                }
                            </select>
                        </div>
                        <div class="form-group col-md-3">
                            <label for="quantity">Số Lượng</label>
                            <input type="number" class="form-control" id="quantity" placeholder="Nhập số lượng" step="1" min="20" />
                        </div>
                        <div class="form-group col-md-3">
                            <label for="price">Giá</label>
                            <input type="number" class="form-control" id="price" placeholder="Nhập giá bán" step="500" min="3000" />
                        </div>
                        <div class="form-group col-md-2 my-4">
                            <button type="button" id="addProduct" class="btn btn-secondary">Thêm Sản Phẩm</button>
                        </div>
                    </div>
                </div>
            </div>

            <table class="table table-bordered" id="orderDetailsTable">
                <thead>
                    <tr>
                        <th>Mã Sản Phẩm</th>
                        <th>Tên Sản Phẩm</th>
                        <th>Số Lượng</th>
                        <th>Giá</th>
                        <th>Thao Tác</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>

            <button type="submit" class="btn btn-primary ml-2">Tạo Phiếu Đặt</button>
            <a class="btn icon-btn btn-outline-secondary my-3 ml-2" href="@Url.Action("Index","PurchaseOrder")" title="Quay lại">
                <i class="feather icon-corner-up-left"></i>
            </a>
        </form>
    </div>
</div>
<script>
let orderDetailIndex = 0; // Để theo dõi chỉ số của từng dòng sản phẩm
let products = @Html.Raw(Json.Encode(ViewBag.products)); // Lấy danh sách sản phẩm từ ViewBag

// Lắng nghe sự kiện khi nhấn nút "Thêm Sản Phẩm"
document.getElementById("addProduct").addEventListener("click", function () {
    // Lấy thông tin từ các ô nhập liệu
    let productCode = document.getElementById("productCode").value;
    let quantity = document.getElementById("quantity").value;
    let price = document.getElementById("price").value;

    // Kiểm tra xem có nhập đầy đủ thông tin không
    if (!productCode || !quantity || !price) {
        alert("Vui lòng nhập đầy đủ thông tin.");
        return;
    }

    // Kiểm tra xem quantity và price có hợp lệ không
    if (!Number.isInteger(parseFloat(quantity)) || parseInt(quantity) < 20) {
        alert("Số lượng phải là một số nguyên và lớn hơn hoặc bằng 20.");
        return;
    }

    if (parseFloat(price) < 3000) {
        alert("Giá phải lớn hơn hoặc bằng 3000.");
        return;
    }
    // Kiểm tra mã sản phẩm có hợp lệ không
    let product = products.find(p => p.Value === productCode);

    if (!product) {
        alert("Mã sản phẩm không hợp lệ.");
        return;
    }

    // Kiểm tra xem sản phẩm đã có trong bảng chưa
    let existingRow = Array.from(document.querySelectorAll("#orderDetailsTable tbody tr")).find(row => {
        return row.cells[0].textContent === productCode;
    });

    if (existingRow) {
        // Nếu sản phẩm đã có trong bảng, cộng dồn số lượng
        let quantityInput = existingRow.querySelector(".quantity-input");
        let priceInput = existingRow.querySelector(".price-input");

        // Cộng dồn số lượng và cập nhật giá mới (nếu có)
        quantityInput.value = parseInt(quantityInput.value) + parseInt(quantity);

        // Kiểm tra nếu giá nhập vào khác giá hiện tại trong bảng thì cập nhật giá mới
        if (parseFloat(priceInput.value) !== parseFloat(price)) {
            priceInput.value = price; // Cập nhật giá mới
        }
    } else {
        // Nếu sản phẩm chưa có, thêm một dòng mới vào bảng
        let newRow = document.createElement("tr");
        newRow.innerHTML = `
            <td>${product.Value}</td>
            <td>${product.Text}</td>
            <td>
                <input type="hidden" name="orderDetails[${orderDetailIndex}].product_id" value="${product.Value}"/>
                <input type="number" class="form-control quantity-input" name="orderDetails[${orderDetailIndex}].quantity" value="${quantity}" min="20" />
            </td>
            <td><input type="number" class="form-control price-input" name="orderDetails[${orderDetailIndex}].price" value="${price}" min="3000" step="500" /></td>
            <td><button type="button" class="btn btn-danger btn-sm remove-product">Xóa</button></td>
        `;

        // Thêm dòng mới vào bảng
        document.querySelector("#orderDetailsTable tbody").appendChild(newRow);

        // Thêm chức năng xóa cho nút
        newRow.querySelector(".remove-product").addEventListener("click", function () {
            newRow.remove();
        });

        // Tăng chỉ số orderDetailIndex cho lần thêm tiếp theo
        orderDetailIndex++;
    }

    // Xóa các ô nhập liệu để người dùng nhập tiếp sản phẩm khác
    document.getElementById("productCode").value = "";
    document.getElementById("quantity").value = "";
    document.getElementById("price").value = "";
});

// Khi form được gửi, thu thập chi tiết đơn hàng từ bảng
document.querySelector("form").addEventListener("submit", function (event) {
    // Ngừng gửi form nếu bảng không có sản phẩm
    let rows = document.querySelectorAll("#orderDetailsTable tbody tr");

    if (rows.length === 0) {
        event.preventDefault();  // Ngừng gửi form
        alert("Vui lòng thêm sản phẩm vào bảng trước khi tạo phiếu đặt.");
        return;
    }

    // Kiểm tra từng dòng trong bảng
    for (let row of rows) {
        let quantityInput = row.querySelector(".quantity-input");
        let priceInput = row.querySelector(".price-input");

        let quantity = quantityInput.value;
        let price = priceInput.value;

        // Kiểm tra xem số lượng và giá có được nhập hay không
        if (!quantity || !price) {
            event.preventDefault();  // Ngừng gửi form
            alert("Số lượng và giá không được để trống.");
            return;
        }

        // Kiểm tra số lượng tối thiểu là 20
        if (parseInt(quantity) < 20) {
            event.preventDefault();  // Ngừng gửi form
            alert("Số lượng phải lớn hơn hoặc bằng 20.");
            return;
        }

        // Kiểm tra giá tối thiểu là 3000
        if (parseFloat(price) < 3000) {
            event.preventDefault();  // Ngừng gửi form
            alert("Giá phải lớn hơn hoặc bằng 3000.");
            return;
        }

        // Kiểm tra nếu số lượng không phải là số nguyên
        if (!Number.isInteger(parseFloat(quantity))) {
            event.preventDefault();  // Ngừng gửi form
            alert("Số lượng phải là một số nguyên.");
            return;
        }
    }
});
</script>
