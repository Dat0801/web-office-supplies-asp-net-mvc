@model VanPhongPham.Models.StatisticsViewModel
@{
    ViewBag.Title = "Thống kê - Quản Trị";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
@*<a href="@Url.Action("ExportToExcel", "Statistics", new { startDate = Model.StartDate, endDate = Model.EndDate })" class="btn btn-success" style="position: absolute; right: 20px; top: 80px;">Xuất file excel</a>*@
<div class="period-selector">
    <form method="get" class="form-inline">
        <label for="startDate" class="mr-2">Ngày bắt đầu:</label>
        <input type="date"
               name="startDate"
               class="form-control mr-2"
               value="@(Model.StartDate.ToString("yyyy-MM-dd"))" />

        <label for="endDate" class="mr-2">Ngày kết thúc:</label>
        <input type="date"
               name="endDate"
               class="form-control mr-2"
               value="@(Model.EndDate.ToString("yyyy-MM-dd"))" />

        <button type="submit" class="btn btn-primary">Xem thống kê</button> &nbsp;&nbsp;
        <a href="@Url.Action("ExportToExcel", "Statistics", new { startDate = Model.StartDate, endDate = Model.EndDate })" class="btn btn-success excel">Xuất file excel</a>
    </form>
</div>
<div>
    <h3>Doanh thu và lợi nhuận</h3>
    <canvas id="revenueProfitChart" width="400" height="200"></canvas>
</div>
<div>
    <h3>Sản phẩm bán chạy nhất</h3>
    <canvas id="bestSellingChart" width="400" height="200"></canvas>
</div>
<div>
    <h3>Sản phẩm bán chậm nhất</h3>
    <canvas id="slowSellingChart" width="400" height="200"></canvas>
</div>
<div>
    <h3>Sản phẩm được đánh giá cao nhất</h3>
    <canvas id="highestRatedChart" width="400" height="200"></canvas>
</div>

<div>
    <h3>Sản phẩm được đánh giá thấp nhất</h3>
    <canvas id="lowestRatedChart" width="400" height="200"></canvas>
</div>
<script>
    var ctx = document.getElementById('revenueProfitChart').getContext('2d');
    var revenueProfitChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['Tổng Doanh Thu', 'Tổng Lợi Nhuận'],
            datasets: [{
                label: '',
                data: [@ViewBag.TotalRevenue, @ViewBag.TotalProfit],
                backgroundColor: ['#FF5733', '#33FF57'],
                borderColor: ['#FF5733', '#33FF57'],
                borderWidth: 1
            }]
        },
        options: {
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });


    @{
    var quantities = Model.BestSellingProducts.Select(x => x.TotalQuantitySold).ToArray();
    var productNames = Model.BestSellingProducts.Select(x => x.ProductName).ToArray();
    }
    var bestSellingData = @Html.Raw(Json.Encode(quantities));
    var bestSellingLabels = @Html.Raw(Json.Encode(productNames));
    var ctx2 = document.getElementById('bestSellingChart').getContext('2d');
    var bestSellingChart = new Chart(ctx2, {
        type: 'bar',
        data: {
            labels: bestSellingLabels, // Tên sản phẩm
            datasets: [{
                label: 'Sản phẩm bán chạy nhất',
                data: bestSellingData, // Số lượng bán
                backgroundColor: '#36A2EB',
                borderColor: '#36A2EB',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
    @{
        var slowSellingQuantities = Model.SlowSellingProducts.Select(x => x.TotalQuantitySold).ToArray();
        var slowSellingNames = Model.SlowSellingProducts.Select(x => x.ProductName).ToArray();
    }
    var slowSellingData = @Html.Raw(Json.Encode(slowSellingQuantities));
    var slowSellingLabels = @Html.Raw(Json.Encode(slowSellingNames));

    var ctxSlowSelling = document.getElementById('slowSellingChart').getContext('2d');
    var slowSellingChart = new Chart(ctxSlowSelling, {
        type: 'bar',
        data: {
            labels: slowSellingLabels,
            datasets: [{
                label: 'Sản phẩm bán chậm nhất',
                data: slowSellingData,
                backgroundColor: '#FFB74D',
                borderColor: '#FF9800',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // Sản phẩm được đánh giá cao nhất
    @{
        var highestRatedScores = Model.HighestRatedProducts.Select(x => x.AverageRating).ToArray();
        var highestRatedNames = Model.HighestRatedProducts.Select(x => x.ProductName).ToArray();
    }
    var highestRatedData = @Html.Raw(Json.Encode(highestRatedScores));
    var highestRatedLabels = @Html.Raw(Json.Encode(highestRatedNames));

    var ctxHighestRated = document.getElementById('highestRatedChart').getContext('2d');
    var highestRatedChart = new Chart(ctxHighestRated, {
        type: 'bar',
        data: {
            labels: highestRatedLabels,
            datasets: [{
                label: 'Đánh giá trung bình',
                data: highestRatedData,
                backgroundColor: '#81C784',
                borderColor: '#4CAF50',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // Sản phẩm được đánh giá thấp nhất
    @{
        var lowestRatedScores = Model.LowestRatedProducts.Select(x => x.AverageRating).ToArray();
        var lowestRatedNames = Model.LowestRatedProducts.Select(x => x.ProductName).ToArray();
    }
    var lowestRatedData = @Html.Raw(Json.Encode(lowestRatedScores));
    var lowestRatedLabels = @Html.Raw(Json.Encode(lowestRatedNames));

    var ctxLowestRated = document.getElementById('lowestRatedChart').getContext('2d');
    var lowestRatedChart = new Chart(ctxLowestRated, {
        type: 'bar',
        data: {
            labels: lowestRatedLabels,
            datasets: [{
                label: 'Đánh giá trung bình',
                data: lowestRatedData,
                backgroundColor: '#E57373',
                borderColor: '#F44336',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    document.querySelector('.excel').addEventListener('click', function (event) {
        event.preventDefault(); // Ngăn chặn hành động mặc định
        const startDate = document.querySelector('input[name="startDate"]').value;
        const endDate = document.querySelector('input[name="endDate"]').value;

        if (startDate && endDate) {
            const url = `/Statistics/ExportToExcel?startDate=${startDate}&endDate=${endDate}`;
            window.location.href = url; // Điều hướng tới URL mới
        } else {
            alert('Vui lòng nhập đầy đủ ngày bắt đầu và ngày kết thúc!');
        }
    });

</script>

