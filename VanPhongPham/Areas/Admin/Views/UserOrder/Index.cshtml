@using PagedList.Mvc;
@using PagedList;
@model IPagedList<VanPhongPham.Models.order>

@{
    ViewBag.Title = "Bán hàng - Quản Trị";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<h4 class="font-weight-bold mb-0">Danh sách đơn hàng</h4>
<div class="row">
    <div class="navbar-nav my-3 ml-2">
        <!-- Search -->
        <form class="nav-item navbar-text navbar-search-box p-0 active" action="@Url.Action("Index", "UserOrder")" method="get">
            <span class="navbar-search-input">
                <input type="text" class="form-control navbar-text mx-2" name="search_str" placeholder="Tìm kiếm..." value="@(ViewBag.search_str ?? "")">
            </span>
            <button class="btn icon-btn btn-outline-primary">
                <i class="feather icon-search navbar-icon align-middle"></i>
            </button>
        </form>
    </div>
</div>
<div class="card">
    <table class="table card-table table-responsive-lg">
        <thead class="thead-light">
            <tr>
                <th>Mã hóa đơn</th>
                <th>Tên khách hàng</th>
                <th>SĐT</th>
                <th>Ngày đặt</th>
                <th>Tổng tiền</th>
                <th>Trạng thái</th>
                <th>Hành động</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in Model)
            {
                var addressParts = order.info_address.Split(new[] { ", " }, StringSplitOptions.None);
                var name = addressParts.ElementAtOrDefault(0) ?? "";
                var phone = addressParts.ElementAtOrDefault(1) ?? "";
                var address = string.Join(", ", addressParts.Skip(2));
                <tr>
                    <td>@order.order_id</td>
                    <td>@name</td>
                    <td>@phone</td>
                    <td>@order.created_at.Value.ToString("HH:mm dd-MM-yyyy")</td>
                    <td>₫@(order.total_amount.HasValue ? order.total_amount.Value.ToString("N0") : "0")</td>

                    @if (order.order_status.order_status_name != "Đã hủy")
                    {
                        <td class="text-success">@order.order_status.order_status_name</td>
                    }
                    else
                    {
                        <td class="text-danger">@order.order_status.order_status_name</td>
                    }
                    <td>
                        <a class="btn icon-btn btn-outline-info"
                           title="Xem chi tiết"
                           href="@Url.Action("UserOrderDetails", "UserOrder", new { ord_id = order.order_id })">
                            <i class="feather icon-eye navbar-icon align-middle"></i>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="d-flex justify-content-center">
        <div class="pagination-container">
            @Html.PagedListPager(Model, page => Url.Action("Index", new { page }))
        </div>
    </div>
</div>

@*<script>
    async function createOrderForGHN(items, totalWeight, name, phone, address, to_ward, to_district, to_province, totalamount) {
        // Các giá trị cần thiết cho GHN API
        const payment_type_id = 1; // Ví dụ: 1 cho người nhận trả, 2 cho người gửi trả
        const to_name = "Tên người nhận";
        const to_phone = "Số điện thoại người nhận";
        const to_address = "Địa chỉ chi tiết";
        const to_ward_name = "Tên phường/xã";
        const to_disctrict_name = "Tên quận/huyện";
        const to_province_name = "Tên tỉnh/thành phố";
        const cod_amount = 50000; // Số tiền thu hộ, nếu có
        const service_type_id = 2; // Loại dịch vụ GHN, ví dụ: 2 cho dịch vụ nhanh

        // Gọi hàm `createOrder` từ GHN.js
        try {
            const result = await createOrder(
                payment_type_id,
                to_name,
                to_phone,
                to_address,
                to_ward_name,
                to_disctrict_name,
                to_province_name,
                cod_amount,
                totalWeight,
                service_type_id,
                items
            );

            if (result) {
                alert("Tạo đơn hàng thành công! Mã đơn hàng: " + result.order_code);
            } else {
                alert("Lỗi khi tạo đơn hàng");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Lỗi khi gọi API tạo đơn hàng.");
        }
    }

    // Gọi hàm `createOrderForGHN` khi nhấn nút
    function initiateOrder(items, totalWeight, name, phone, address, to_ward, to_district, to_province, totalamount) {
        console.log("Items:", items);
        console.log("Total Weight:", totalWeight);
        console.log("Name:", name);
        console.log("Phone:", phone);
        console.log("Address:", address);
        console.log("Ward:", to_ward);
        console.log("District:", to_district);
        console.log("Province:", to_province);
        console.log("Total Amount:", totalamount);
        // Xử lý thêm logic hoặc gọi API tại đây
    }
</script>*@


