@model VanPhongPham.Models.OrderViewModel
@using VanPhongPham.Models;

@{
    ViewBag.Title = "Chi tiết đơn hàng - Quản trị";
    var totalWeight = ViewBag.TotalWeight;
    var addressParts = Model.InfoAddress.Split(new[] { ", " }, StringSplitOptions.None);
    var name = addressParts.ElementAtOrDefault(0) ?? "";
    var phone = addressParts.ElementAtOrDefault(1) ?? "";
    var address = string.Join(", ", addressParts.Skip(2));
    var to_ward_name = addressParts.ElementAtOrDefault(3) ?? "";
    var to_district_name = addressParts.ElementAtOrDefault(4) ?? "";
    var to_province_name = addressParts.ElementAtOrDefault(5) ?? "";

    var admin = Session["Admin"] as user;
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<style>
    .review-textarea {
        width: 100%;
        padding: 8px;
        resize: none;
        font-size: 14px;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-top: 8px;
    }

    .messagesmodal {
        display: none; /* Mặc định là ẩn */
        position: fixed;
        top: 20px; /* Đưa lên trên một chút */
        left: 50%;
        transform: translateX(-50%);
        width: 200px;
        background-color: rgba(0, 0, 0, 0.8); /* Màu nền đen nhạt */
        color: white; /* Chữ màu trắng */
        border-radius: 5px;
        font-size: 14px;
        z-index: 9999;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .shipping-timeline {
        position: relative;
        margin-top: 15px;
        padding-left: 20px;
        border-left: 2px solid #ddd;
    }

    .timeline-item {
        position: relative;
        margin-bottom: 20px;
        padding-left: 40px;
    }

    .timeline-icon {
        position: absolute;
        left: -10px;
        top: 0;
        font-size: 20px;
        color: #4caf50;
    }

    .timeline-item.completed .timeline-icon {
        color: #e91e63; /* Xanh lá cây cho trạng thái đã hoàn tất */
        font-size: 20px;
    }

    .status-text {
        font-weight: bold;
        color: #26AA99;
        font-size: 14px;
        margin: 0;
    }

    .timestamp {
        font-size: 12px;
    }

    .timeline-content p {
        margin-top: 5px;
    }

    .image-container img {
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 5px;
        transition: transform 0.2s;
    }

        .image-container img:hover {
            transform: scale(1.1); /* Zoom nhẹ khi hover */
        }
    /* Modal background */
    .custom-modal {
        display: none; /* Hidden by default */
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1000;
        background-color: rgba(0, 0, 0, 0.8); /* Black background with transparency */
        justify-content: center;
        align-items: center;
    }

    /* Modal content (image) */
    .modal-image {
        max-width: 90%;
        max-height: 90%;
        box-shadow: 0 0 20px rgba(255, 255, 255, 0.3);
        border-radius: 8px;
    }

    /* Close button */
    .close-modal {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 24px;
        color: white;
        cursor: pointer;
        font-weight: bold;
    }
</style>

<div class="container-fluid p-0 m-0">
    <!-- Thông tin hóa đơn và Thông tin giao hàng -->
    <div class="row mb-5">
        <div class="col" style="border: 1px solid black; border-radius: 10px; padding: 10px; margin-right: 20px; width: 100%">
            <h3 class="text-center text-primary">Thông tin hóa đơn</h3>
            <div class="border p-3">
                <div class="row">
                    <div class="col-6">
                        @if (Model.OrderCode != "")
                        {
                            <p style="font-size: 18px"><strong>Mã vận đơn:</strong> @Model.OrderCode</p>
                        }
                        else
                        {
                            <p style="font-size: 18px"><strong>Mã vận đơn:</strong></p>
                        }

                        <p><strong>Mã hóa đơn:</strong> @Model.OrderId</p>

                        @if (Model.OrderStatusName == "Đã hủy")
                        {
                            <p><strong>Ngày hủy:</strong> @Model.CreatedAt.Value.ToString("HH:mm dd-MM-yyyy")</p>
                        }
                        else
                        {
                            if (Model.OrderStatusID == 5 && Model.CancellationRequested == 3)
                            {
                                <p><strong>Chấp nhận yêu cầu trả vào:</strong> @Model.CreatedAt.Value.ToString("HH:mm dd-MM-yyyy")</p>
                            }
                            else if (Model.OrderStatusID == 5 && Model.CancellationRequested == 5)
                            {
                                <p><strong>Từ chối hoàn tiền vào:</strong> @Model.CreatedAt.Value.ToString("HH:mm dd-MM-yyyy")</p>
                            }
                            else if (Model.OrderStatusID == 5 && Model.CancellationRequested == 6)
                            {
                                <p><strong>Chấp nhận hoàn tiền vào:</strong> @Model.CreatedAt.Value.ToString("HH:mm dd-MM-yyyy")</p>
                            }
                            else
                            {
                                <p><strong>Ngày đặt:</strong> @Model.CreatedAt.Value.ToString("HH:mm dd-MM-yyyy")</p>
                            }
                        }

                        @if (Model.OrderStatusName == "Hoàn thành")
                        {
                            <p><strong>Ngày nhận:</strong> @Model.DeliveryDate.Value.ToString("HH:mm dd-MM-yyyy")</p>
                        }

                        @if (Model.OrderStatusName != "Đã hủy" && Model.OrderStatusName != "Trả hàng/Hoàn tiền")
                        {
                            if (Model.OrderStatusName == "Chờ xác nhận")
                            {
                                <p><strong>Tình trạng đơn hàng:</strong> <span class="text-warning" style="font-weight: bold">@Model.OrderStatusName</span></p>
                            }
                            else
                            {
                                <p><strong>Tình trạng đơn hàng:</strong> <span class="text-success" style="font-weight: bold">@Model.OrderStatusName</span></p>
                            }
                        }
                        else
                        {
                            <p><strong>Tình trạng đơn hàng:</strong> <span class="text-danger" style="font-weight: bold">@Model.OrderStatusName</span></p>
                        }

                        @if (Model.EmployeeId != null)
                        {
                            if (Model.FullNameEmployee != null && Model.FullNameEmployee.Any())
                            {
                                <p><strong>Người xử lý:</strong> @Model.EmployeeId - @Model.FullNameEmployee</p>
                            }
                            else
                            {
                                <p><strong>Người xử lý:</strong> @Model.EmployeeId</p>
                            }
                        }
                        else
                        {
                            <p><strong>Người xử lý:</strong></p>
                        }
                    </div>
                    <div class="col-6">
                        <p><strong>Phương thức thanh toán:</strong> <span>@Model.MethodName</span></p>

                        <p><strong>Tổng tiền hàng:</strong> <span>₫@( (Model.TotalAmount.Value + Model.DiscountAmount.Value - Model.ShippingFee.Value).ToString("N0") )</span></p>

                        <p><strong>Phí vận chuyển:</strong> <span>₫@(Model.ShippingFee.HasValue ? Model.ShippingFee.Value.ToString("N0") : "0")</span></p>

                        <p><strong>Giảm giá tiền hàng:</strong> <span>-₫@(Model.DiscountAmount.HasValue ? Model.DiscountAmount.Value.ToString("N0") : "0")</span></p>

                        <p><strong>Thành tiền:</strong> <span class="text-danger" style="font-weight: bold">₫@(Model.TotalAmount.HasValue ? Model.TotalAmount.Value.ToString("N0") : "0")</span></p>

                        @if (Model.OrderStatusID == 5)
                        {
                            <p><strong>Số tiền hoàn lại:</strong> <span class="text-danger" style="font-weight: bold">₫@( (Model.TotalAmount.Value - Model.ShippingFee.Value).ToString("N0") )</span></p>
                        }

                        @if (Model.FullNameCustomer != null)
                        {
                            <p><strong>Khách hàng:</strong> @Model.CustomerId - @Model.FullNameCustomer</p>
                        }
                        else
                        {
                            <p><strong>Khách hàng:</strong> @Model.CustomerId</p>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-5" style="border: 1px solid black; border-radius: 10px; padding: 10px;">
            <h3 class="text-center text-primary">Thông tin giao hàng</h3>
            <div class="border p-3">
                <p><strong>Họ tên người nhận:</strong> @name</p>
                <p><strong>Địa chỉ giao hàng:</strong> @address</p>
                <p><strong>Số điện thoại:</strong> @phone</p>
                <p><strong>Lời nhắn từ khách hàng:</strong> @Model.OrderNote</p>
                <p><strong>Theo dõi đơn hàng:</strong></p>
                <div style="margin-top: 20px; margin-bottom: 20px;">
                    <div id="shipping_items" class="shipping-timeline">
                    </div>
                </div>
                <button type="button" id="PrintOrder" class="btn btn-primary" style="visibility: hidden" data-orderid="@Model.OrderId" data-ordercode="@Model.OrderCode"></button>
            </div>
        </div>
    </div>

    <!-- Chi tiết hóa đơn -->
    <h3 class="text-center text-primary">Chi tiết hóa đơn</h3>
    <div class="card">
        <table class="table card-table table-responsive-lg">
            <thead class="thead-light">
                <tr class="text-center">
                    <th>STT</th>
                    <th>Sản phẩm</th>
                    <th></th>
                    <th>Số lượng</th>
                    <th>Đơn giá</th>
                    <th>Thành tiền</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.OrderDetails.Count; i++)
                {
                    var productprice = 0.0;

                    if (Model.OrderDetails[i].Promotion_Price == 0)
                    {
                        productprice = Model.OrderDetails[i].Price;
                    }
                    else
                    {
                        productprice = Model.OrderDetails[i].Promotion_Price;
                    }

                    var weight = int.Parse(Model.OrderDetails[i].ProductWeight.Split(' ')[0]) * Model.OrderDetails[i].Quantity;

                    <tr class="text-center product-item" data-name="@Model.OrderDetails[i].ProductName" data-quantity="@Model.OrderDetails[i].Quantity" data-price="@productprice" data-weight="@weight">
                        <td class="align-middle">@(i + 1)</td>
                        <td class="align-middle">
                            <img src="@Model.OrderDetails[i].ImageUrl" alt="Ảnh sản phẩm" style="width: 80px; height: auto;">
                        </td>
                        <td class="align-middle" style="
                            display: flex;
                            justify-content: left;
                            align-items: center;
                            width: 500px;
                            height: 100px;  /* Đặt chiều cao cho td nếu cần */
                            text-align: center;">
                            <div style="
                                white-space: nowrap;
                                overflow: hidden;
                                text-overflow: ellipsis;
                                max-width: 100%; /* Hoặc bất kỳ giá trị nào bạn muốn cho chiều rộng */
                                display: block;">
                                @Model.OrderDetails[i].ProductName
                            </div>
                        </td>
                        <td class="align-middle">@Model.OrderDetails[i].Quantity</td>

                        @if (Model.OrderDetails[i].Promotion_Price == 0)
                        {
                            <td class="align-middle" style="color: #272727;">₫@Model.OrderDetails[i].Price.ToString("N0")</td>
                        }
                        else
                        {
                            <td class="align-middle" style="color: #272727;"><del style="margin-right:10px; color: #777777">₫@Model.OrderDetails[i].Price.ToString("N0")</del>₫@Model.OrderDetails[i].Promotion_Price.ToString("N0")</td>
                        }

                        <td class="align-middle" style="color: #272727;">₫@Model.OrderDetails[i].TotalAmount.ToString("N0")</td>

                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Nút xác nhận -->
    @if (Model.OrderStatusID == 1)
    {
        <div class="text-center mt-5">
            <button type="button" id="cancelBtn" data-orderid="@Model.OrderId" class="btn btn-primary">Từ chối</button>
            <button type="button" id="confirmBtn" class="btn btn-primary">Xác nhận</button>
        </div>
    }
    else if (Model.OrderStatusID == 2 && Model.CancellationRequested == 1)
    {
        <div class="text-center mt-5">
            <h3 class="text-center text-primary">Lý do hủy</h3>
            <textarea class="review-textarea" style="height: 100px; margin-bottom: 20px;" disabled>@Model.CancellationReason</textarea>
            <button type="button" id="RefuseBtn" class="btn btn-primary" data-orderid="@Model.OrderId" data-ordercode="@Model.OrderCode">Từ chối</button>
            <button type="button" id="AcceptBtn" class="btn btn-primary" data-orderid="@Model.OrderId" data-ordercode="@Model.OrderCode">Chấp nhận</button>
        </div>
    }
    else if (Model.OrderStatusID == 3 && Model.CancellationRequested == 1)
    {
        <div class="text-center mt-5">
            <h3 class="text-center text-primary">Lý do trả</h3>
            <textarea class="review-textarea" style="height: 100px;" disabled>@Model.CancellationReason</textarea>

            <h4 class="text-left mt-1">Hình ảnh trả hàng</h4>
            <div id="returnImagePreview" class="d-flex flex-wrap justify-content-start" style="margin-bottom: 20px;">
                @{
                    if (!string.IsNullOrEmpty(Model.ReturnImages))
                    {
                        var imageLinks = Model.ReturnImages.Split(','); // Cắt chuỗi thành mảng
                        foreach (var image in imageLinks)
                        {
                            <div class="image-container" style="position: relative; margin-right: 10px">
                                <img src="@image" alt="Hình ảnh trả" class="preview-image"
                                     style="width: 100px; height: 100px; object-fit: contain; cursor: pointer;"
                                     data-bs-toggle="modal" data-bs-target="#imageModal" data-src="@image" />
                            </div>
                        }
                    }
                }
            </div>

            <!-- Modal để preview ảnh -->
            <div id="imageModal" class="custom-modal">
                <span class="close-modal">&times;</span>
                <img id="modalImage" src="" alt="Preview" class="modal-image" />
            </div>

            <button type="button" id="RefuseBtn1" class="btn btn-primary" data-orderid="@Model.OrderId" data-ordercode="@Model.OrderCode">Từ chối</button>
            <button type="button" id="AcceptBtn1" class="btn btn-primary" data-orderid="@Model.OrderId" data-ordercode="@Model.OrderCode">Chấp nhận</button>
        </div>
    }
    else if (Model.OrderStatusID == 4 && Model.CancellationRequested == 3)
    {
        <div class="text-center mt-5">
            <h3 class="text-center text-primary">Lý do hủy</h3>
            <h5 class="text-left">Người mua:</h5>
            <textarea class="review-textarea" style="height: 150px;" disabled>@Model.CancellationReason</textarea>
        </div>
    }
    else if (Model.OrderStatusID == 4 && Model.CancellationRequested == 4)
    {
        <div class="text-center mt-5">
            <h3 class="text-center text-primary">Lý do hủy</h3>
            <h5 class="text-left">Người xử lý:</h5>
            <textarea class="review-textarea" style="height: 150px;" disabled>@Model.CancellationReason</textarea>
        </div>
    }
    else if (Model.OrderStatusID == 5 && Model.CancellationRequested != 5 && Model.CancellationRequested != 6)
    {
        <div class="text-center mt-5">
            <h3 class="text-center text-primary">Lý do trả</h3>
            <textarea class="review-textarea" style="height: 100px;" disabled>@Model.CancellationReason</textarea>

            <h4 class="text-left mt-1">Hình ảnh trả hàng</h4>
            <div id="returnImagePreview" class="d-flex flex-wrap justify-content-start" style="margin-bottom: 20px;">
                @{
                    if (!string.IsNullOrEmpty(Model.ReturnImages))
                    {
                        var imageLinks = Model.ReturnImages.Split(','); // Cắt chuỗi thành mảng
                        foreach (var image in imageLinks)
                        {
                            <div class="image-container" style="position: relative; margin-right: 10px">
                                <img src="@image" alt="Hình ảnh trả" class="preview-image"
                                     style="width: 100px; height: 100px; object-fit: contain; cursor: pointer;"
                                     data-bs-toggle="modal" data-bs-target="#imageModal" data-src="@image" />
                            </div>
                        }
                    }
                }
            </div>

            <!-- Modal để preview ảnh -->
            <div id="imageModal" class="custom-modal">
                <span class="close-modal">&times;</span>
                <img id="modalImage" src="" alt="Preview" class="modal-image" />
            </div>

            <button type="button" id="RefuseBtn2" class="btn btn-primary" style="visibility: hidden" data-orderid="@Model.OrderId" data-ordercode="@Model.OrderCode"></button>
            <button type="button" id="AcceptBtn2" class="btn btn-primary" style="visibility: hidden" data-orderid="@Model.OrderId" data-ordercode="@Model.OrderCode"></button>
        </div>
    }
    else if (Model.OrderStatusID == 5 && (Model.CancellationRequested == 5 || Model.CancellationRequested == 6))
    {
        <div class="text-left mt-5">
            <h3 class="text-center text-primary">Lý do trả</h3>
            @if (Model.CancellationRequested == 5)
            {
                var reasonParts = Model.CancellationReason.Split(new[] { ',' }, 2);
                <div style="border: 1px solid black; border-radius: 10px; padding: 10px; width: 100%">
                    <p style="font-size: 16px">Lý do bởi người mua: @reasonParts[0]</p>
                    <p style="font-size: 16px">Lý do bởi bạn: @reasonParts[1]</p>
                </div>
            }
            else
            {
                <div style="border: 1px solid black; border-radius: 10px; padding: 10px; width: 100%">
                    <p style="font-size: 16px">Lý do bởi người mua: @Model.CancellationReason</p>
                </div>
            }
            <h4 class="text-left mt-4">Hình ảnh trả hàng</h4>
            <div id="returnImagePreview" class="d-flex flex-wrap justify-content-start" style="margin-bottom: 20px;">
                @{
                    if (!string.IsNullOrEmpty(Model.ReturnImages))
                    {
                        var imageLinks = Model.ReturnImages.Split(','); // Cắt chuỗi thành mảng
                        foreach (var image in imageLinks)
                        {
                            <div class="image-container" style="position: relative; margin-right: 10px">
                                <img src="@image" alt="Hình ảnh trả" class="preview-image"
                                     style="width: 100px; height: 100px; object-fit: contain; cursor: pointer;"
                                     data-bs-toggle="modal" data-bs-target="#imageModal" data-src="@image" />
                            </div>
                        }
                    }
                }
            </div>

            <!-- Modal để preview ảnh -->
            <div id="imageModal" class="custom-modal">
                <span class="close-modal">&times;</span>
                <img id="modalImage" src="" alt="Preview" class="modal-image" />
            </div>
        </div>
    }
</div>

@if (ViewBag.View == "CanceledOrders")
{
    <a class="btn icon-btn btn-outline-secondary my-3" href="@Url.Action("CanceledOrders","UserOrder")" title="Quay lại">
        <i class="feather icon-corner-up-left"></i>
    </a>
}
else if (ViewBag.View == "CancelRequest")
{
    <a class="btn icon-btn btn-outline-secondary my-3" href="@Url.Action("CancelRequest","UserOrder")" title="Quay lại">
        <i class="feather icon-corner-up-left"></i>
    </a>
}
else if (ViewBag.View == "ConfirmRequest")
{
    <a class="btn icon-btn btn-outline-secondary my-3" href="@Url.Action("ConfirmRequest","UserOrder")" title="Quay lại">
        <i class="feather icon-corner-up-left"></i>
    </a>
}
else if (ViewBag.View == "DeliveredOrders")
{
    <a class="btn icon-btn btn-outline-secondary my-3" href="@Url.Action("DeliveredOrders","UserOrder")" title="Quay lại">
        <i class="feather icon-corner-up-left"></i>
    </a>
}
else if (ViewBag.View == "DeliveringOrders")
{
    <a class="btn icon-btn btn-outline-secondary my-3" href="@Url.Action("DeliveringOrders","UserOrder")" title="Quay lại">
        <i class="feather icon-corner-up-left"></i>
    </a>
}
else if (ViewBag.View == "ReturnRequest")
{
    <a class="btn icon-btn btn-outline-secondary my-3" href="@Url.Action("ReturnRequest","UserOrder")" title="Quay lại">
        <i class="feather icon-corner-up-left"></i>
    </a>
}
else if (ViewBag.View == "ReturnOrders")
{
    <a class="btn icon-btn btn-outline-secondary my-3" href="@Url.Action("ReturnOrders","UserOrder")" title="Quay lại">
        <i class="feather icon-corner-up-left"></i>
    </a>
}
else if (ViewBag.View == "Index")
{
    <a class="btn icon-btn btn-outline-secondary my-3" href="@Url.Action("Index","UserOrder")" title="Quay lại">
        <i class="feather icon-corner-up-left"></i>
    </a>
}

<div id="MessagesModal" class="messagesmodal" tabindex="-1" role="dialog" aria-labelledby="MessagesModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog" role="document">
        <div class="modal-content" style="background-color: rgba(0, 0, 0, 0.8);">
            <div class="modal-body p-0">
                <p style="text-align: center"></p>
            </div>
        </div>
    </div>
</div>

<!-- Modal nhập lý do hủy -->
<div class="modal fade" id="cancelModal" tabindex="-1" role="dialog" aria-labelledby="cancelModalLabel" aria-hidden="true" data-backdrop="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cancelModalLabel">Nhập lý do hủy</h5>
            </div>
            <div class="modal-body">
                <textarea id="cancelReason" class="review-textarea" style="height: 200px" maxlength="100" placeholder="Nhập nội dung hủy đơn hàng, tối đa 100 ký tự"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" id="confirmCancelBtn" class="btn btn-primary">Xác Nhận</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal nhập lý do từ chối hoàn tiền -->
<div class="modal fade" id="discardrechargeModal" tabindex="-1" role="dialog" aria-labelledby="discardrechargeModalLabel" aria-hidden="true" data-backdrop="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="discardrechargeModalLabel">Nhập lý từ chối hoàn tiền</h5>
            </div>
            <div class="modal-body">
                <textarea id="discardrechargeReason" class="review-textarea" style="height: 200px" maxlength="100" placeholder="Nhập nội dung từ chối hoàn tiền, tối đa 100 ký tự"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" id="discardrechargeBtn" class="btn btn-primary">Xác Nhận</button>
            </div>
        </div>
    </div>
</div>

<script>
    if (@Model.OrderStatusID === 1)
    {
        var payment_type_id;
        var cod_amount;
        var to_name = "@Html.Raw(name)";
        var to_phone = "@Html.Raw(phone)";
        var to_address = "@Html.Raw(address)";
        var to_ward_name = "@Html.Raw(to_ward_name)";
        var to_district_name = "@Html.Raw(to_district_name)";
        var to_province_name = "@Html.Raw(to_province_name)";
        var weight = "@Html.Raw(totalWeight)";
        var service_type_id;

        // Đặt các giá trị cho payment_type_id và cod_amount dựa trên methodId
        var methodId = "@Model.MethodId";
        if (methodId === "PAY001")
        {
            payment_type_id = 2;
            cod_amount = parseInt("@(Model.TotalAmount.Value - Model.ShippingFee.Value)");
        }
        else
        {
            payment_type_id = 1;
            cod_amount = 0;
        }

        // Đặt giá trị cho service_type_id dựa trên weight
        if (weight < 20000)
        {
            service_type_id = 2;
        }
        else
        {
            service_type_id = 5;
        }

        var items = [];

        // Lấy tất cả các phần tử với class 'product-item'
        document.querySelectorAll('.product-item').forEach(function (row) {
            // Lấy dữ liệu từ các thuộc tính data- của từng dòng
            var productname = row.getAttribute('data-name');
            var productquantity = parseInt(row.getAttribute('data-quantity'));
            var productprice = parseFloat(row.getAttribute('data-price'));
            var productweight = parseInt(row.getAttribute('data-weight'));

            // Thêm dữ liệu vào mảng items
            items.push({ name: productname, quantity: productquantity, price: productprice, weight: productweight });
        });

        sessionStorage.setItem("itemsAdmin", JSON.stringify({
        payment_type_id: payment_type_id,
                    to_name: to_name,
                    to_phone: to_phone,
                    to_address: to_address,
                    to_ward_name: to_ward_name,
                    to_district_name: to_district_name,
                    to_province_name: to_province_name,
                    cod_amount: cod_amount,
                    weight: weight,
                    service_type_id: service_type_id,
                    items: items,
                }));

        // Kiểm tra nếu có dữ liệu trong sessionStorage và xóa khi chuyển hướng
        window.addEventListener('beforeunload', function () {
            // Xóa items trong sessionStorage khi người dùng rời khỏi trang
            sessionStorage.removeItem('itemsAdmin');
        });
    }

    if (@Model.OrderStatusID === 3)
    {
        var payment_type_id = 2;
        var cod_amount = 0;
        var to_name = "@Html.Raw(name)";
        var to_phone = "@Html.Raw(phone)";
        var to_address = "@Html.Raw(address)";
        var to_ward_name = "@Html.Raw(to_ward_name)";
        var to_district_name = "@Html.Raw(to_district_name)";
        var to_province_name = "@Html.Raw(to_province_name)";
        var weight = "@Html.Raw(totalWeight)";
        var service_type_id;

        // Đặt giá trị cho service_type_id dựa trên weight
        if (weight < 20000)
        {
            service_type_id = 2;
        }
        else
        {
            service_type_id = 5;
        }

        var items = [];

        // Lấy tất cả các phần tử với class 'product-item'
        document.querySelectorAll('.product-item').forEach(function (row) {
            // Lấy dữ liệu từ các thuộc tính data- của từng dòng
            var productname = row.getAttribute('data-name');
            var productquantity = parseInt(row.getAttribute('data-quantity'));
            var productprice = parseFloat(row.getAttribute('data-price'));
            var productweight = parseInt(row.getAttribute('data-weight'));

            // Thêm dữ liệu vào mảng items
            items.push({ name: productname, quantity: productquantity, price: productprice, weight: productweight });
        });

        sessionStorage.setItem("itemsAdmin", JSON.stringify({
        payment_type_id: payment_type_id,
                    to_name: to_name,
                    to_phone: to_phone,
                    to_address: to_address,
                    to_ward_name: to_ward_name,
                    to_district_name: to_district_name,
                    to_province_name: to_province_name,
                    cod_amount: cod_amount,
                    weight: weight,
                    service_type_id: service_type_id,
                    items: items,
                }));

        // Kiểm tra nếu có dữ liệu trong sessionStorage và xóa khi chuyển hướng
        window.addEventListener('beforeunload', function () {
            // Xóa items trong sessionStorage khi người dùng rời khỏi trang
            sessionStorage.removeItem('itemsAdmin');
        });
    }

    document.addEventListener('DOMContentLoaded', async function () {
        const previewImages = document.querySelectorAll(".preview-image");
        const modal = document.getElementById("imageModal");
        const modalImage = document.getElementById("modalImage");
        const closeModal = document.querySelector(".close-modal");

        // Mở modal khi click vào ảnh
        previewImages.forEach(image => {
            image.addEventListener("click", function () {
                const src = image.getAttribute("src"); // Lấy link ảnh từ thuộc tính src
                modalImage.src = src; // Set ảnh trong modal
                modal.style.display = "flex"; // Hiển thị modal
            });
        });

        if (closeModal) {
            closeModal.onclick = function () {
                modal.style.display = "none";
            }
        }
        if (modal) {
            modal.onclick = function () {
                if (event.target === modal)
                {
                    modal.style.display = "none";
                }
            }
        }

        const confirmBtn = document.getElementById("confirmBtn");
        const cancelBtn = document.getElementById("cancelBtn");
        const confirmCancelBtn = document.getElementById("confirmCancelBtn");
        const AcceptBtn = document.getElementById("AcceptBtn");
        const RefuseBtn = document.getElementById("RefuseBtn");
        const AcceptBtn1 = document.getElementById("AcceptBtn1");
        const RefuseBtn1 = document.getElementById("RefuseBtn1");
        const AcceptBtn2 = document.getElementById("AcceptBtn2");
        const RefuseBtn2 = document.getElementById("RefuseBtn2");
        const discardrechargeBtn = document.getElementById("discardrechargeBtn");
        const PrintOrder = document.getElementById("PrintOrder");

        if (confirmBtn)
        {
            document.getElementById("confirmBtn").addEventListener('click', async function () {
                const response13 = await fetch('/UserOrder/CheckProductQuantity', {
                    method: "POST",
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        order_id: "@Model.OrderId"
                    })
                });

                const result13 = await response13.json();

                if (result13.success) {
                    const itemsAdmin = JSON.parse(sessionStorage.getItem('itemsAdmin'));

                    const createOrderResponse = await createOrder(
                        itemsAdmin.payment_type_id,
                        itemsAdmin.to_name,
                        itemsAdmin.to_phone,
                        itemsAdmin.to_address,
                        itemsAdmin.to_ward_name,
                        itemsAdmin.to_district_name,
                        itemsAdmin.to_province_name,
                        itemsAdmin.cod_amount,
                        itemsAdmin.weight,
                        itemsAdmin.service_type_id,
                        itemsAdmin.items
                    );

                    if (createOrderResponse) {
                        const response = await fetch('/UserOrder/UpdateOrderAfterConfirm', {
                            method: "POST",
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                ord_id: "@Model.OrderId",
                                employeeid: "@admin.user_id",
                                ordercode: createOrderResponse.order_code
                            })
                        });

                        const result = await response.json();

                        if (result.success) {
                            var viewName = '@ViewBag.View'; // Razor gán giá trị vào biến JavaScript
                            const url = `/Admin/UserOrder/${viewName}`; // Tạo URL động
                            window.location.href = url; // Điều hướng
                        } else {
                            console.log("Lỗi: ", result.message);
                        }
                    } else {
                        console.error("Không tạo được đơn hàng.");
                    }
                } else {
                    const modalBody = document.querySelector("#MessagesModal .modal-body p");
                    modalBody.textContent = `Số lượng sản phẩm không đủ trong kho.`; // Thông báo lỗi

                    // Hiển thị modal với jQuery
                    $("#MessagesModal").modal("show");

                    // Tự động tắt modal sau 3 giây
                    setTimeout(function () {
                        $("#MessagesModal").modal("hide");
                    }, 1500);

                    return;
                }
            });
        }
        if (cancelBtn)
        {
            cancelBtn.onclick = async function () {
                const orderId = this.getAttribute("data-orderid");
                const confirmCancelBtn = document.getElementById("confirmCancelBtn");
                const cancelReason = document.getElementById("cancelReason");

                cancelReason.value = "";

                // Truyền dữ liệu vào nút xác nhận trong modal
                confirmCancelBtn.setAttribute("data-orderid", orderId);

                const bootstrapModal = new bootstrap.Modal(cancelModal);
                bootstrapModal.show();
            };
        }
        if (confirmCancelBtn)
        {
            confirmCancelBtn.onclick = async function ()
            {
                const orderId = this.getAttribute("data-orderid");
                const cancelReason = document.getElementById("cancelReason").value.trim();

                if (!cancelReason) {
                    const modalBody = document.querySelector("#MessagesModal .modal-body p");
                    modalBody.textContent = `Để từ chối, hãy thêm lý do.`; // Thông báo lỗi

                    // Hiển thị modal với jQuery
                    $("#MessagesModal").modal("show");

                    // Tự động tắt modal sau 3 giây
                    setTimeout(function () {
                        $("#MessagesModal").modal("hide");
                    }, 1500);

                    return;
                }

                try {
                    // Gửi yêu cầu cập nhật trạng thái hủy đơn hàng lên server
                    const response = await fetch('/UserOrder/CancelOrderWaitingConfirm', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            employeeid: "@admin.user_id",
                            order_id: orderId,
                            cancelReason: cancelReason
                        })
                    });

                    const result = await response.json();

                    if (result.success) {
                        var viewName = '@ViewBag.View'; // Razor gán giá trị vào biến JavaScript
                        const url = `/Admin/UserOrder/${viewName}`; // Tạo URL động
                        window.location.href = url; // Điều hướng
                    }
                    else {
                        alert(result.message);
                    }
                }
                catch (error) {
                    console.error("Lỗi trong quá trình gửi yêu cầu:", error);
                    alert("Không thể gửi yêu cầu hủy đơn hàng. Vui lòng thử lại.");
                }
            };
        }
        if (AcceptBtn)
        {
            AcceptBtn.onclick = async function ()
            {
                const orderId = this.getAttribute("data-orderid");
                const ordercode = this.getAttribute("data-ordercode");

                const result = await CancelOrder(ordercode);

                if (result) {
                    console.log("Hủy thành công");
                }
                else {
                    console.log("Hủy thất bại");
                }

                const shippingDetail1 = await getShippingDetail(ordercode);

                try
                {
                    // Gửi yêu cầu cập nhật trạng thái hủy đơn hàng lên server
                    const response = await fetch('/UserOrder/UpdateRequestCancelOrder', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            order_id: orderId,
                            finishdate: new Date(shippingDetail1.updated_date).toISOString(),
                            check: parseInt(1)
                        })
                    });

                    const result = await response.json();

                    console.log(result);

                    if (result.success)
                    {
                        var viewName = '@ViewBag.View'; // Razor gán giá trị vào biến JavaScript
                        const url = `/Admin/UserOrder/${viewName}`; // Tạo URL động
                        window.location.href = url; // Điều hướng
                    }
                    else
                    {
                        alert(result.message);
                    }
                }
                catch (error)
                {
                    console.error("Lỗi trong quá trình gửi yêu cầu:", error);
                    alert("Không thể gửi yêu cầu hủy đơn hàng. Vui lòng thử lại.");
                }
            };
        }
        if (RefuseBtn)
        {
            RefuseBtn.onclick = async function () {
                const orderId = this.getAttribute("data-orderid");

                try {
                    // Gửi yêu cầu cập nhật trạng thái hủy đơn hàng lên server
                    const response = await fetch('/UserOrder/UpdateRequestCancelOrder', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            order_id: orderId,
                            finishdate: null,
                            check: 0
                        })
                    });

                    const result = await response.json();

                    if (result.success) {
                        var viewName = '@ViewBag.View'; // Razor gán giá trị vào biến JavaScript
                        const url = `/Admin/UserOrder/${viewName}`; // Tạo URL động
                        window.location.href = url; // Điều hướng
                    }
                    else {
                        alert(result.message);
                    }
                }
                catch (error) {
                    console.error("Lỗi trong quá trình gửi yêu cầu:", error);
                    alert("Không thể gửi yêu cầu hủy đơn hàng. Vui lòng thử lại.");
                }
            };
        }
        if (AcceptBtn1)
        {
            AcceptBtn1.onclick = async function ()
            {
                const orderId = this.getAttribute("data-orderid");
                const itemsAdmin = JSON.parse(sessionStorage.getItem('itemsAdmin'));

                const createOrderResponse = await returnOrder(
                    itemsAdmin.payment_type_id,
                    itemsAdmin.to_name,
                    itemsAdmin.to_phone,
                    itemsAdmin.to_address,
                    itemsAdmin.to_ward_name,
                    itemsAdmin.to_district_name,
                    itemsAdmin.to_province_name,
                    itemsAdmin.cod_amount,
                    itemsAdmin.weight,
                    itemsAdmin.service_type_id,
                    itemsAdmin.items
                );

                if (createOrderResponse)
                {
                    try
                    {
                        // Gửi yêu cầu cập nhật trạng thái hủy đơn hàng lên server
                        const response = await fetch('/UserOrder/UpdateRequestReturnOrder', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                order_id: orderId,
                                order_code: createOrderResponse.order_code,
                                check: parseInt(1)
                            })
                        });

                        const result = await response.json();

                        console.log(result);

                        if (result.success)
                        {
                            var viewName = '@ViewBag.View'; // Razor gán giá trị vào biến JavaScript
                            const url = `/Admin/UserOrder/${viewName}`; // Tạo URL động
                            window.location.href = url; // Điều hướng
                        }
                        else
                        {
                            alert(result.message);
                        }
                    }
                    catch (error)
                    {
                        console.error("Lỗi trong quá trình gửi yêu cầu:", error);
                        alert("Không thể gửi yêu cầu trả đơn hàng. Vui lòng thử lại.");
                    }
                }
                else
                {
                    console.error("Không tạo được đơn hàng.");
                }
            };
        }
        if (RefuseBtn1)
        {
            RefuseBtn1.onclick = async function () {
                const orderId = this.getAttribute("data-orderid");

                try {
                    // Gửi yêu cầu cập nhật trạng thái hủy đơn hàng lên server
                    const response = await fetch('/UserOrder/UpdateRequestReturnOrder', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            order_id: orderId,
                            check: 0
                        })
                    });

                    const result = await response.json();

                    if (result.success) {
                        var viewName = '@ViewBag.View'; // Razor gán giá trị vào biến JavaScript
                        const url = `/Admin/UserOrder/${viewName}`; // Tạo URL động
                        window.location.href = url; // Điều hướng
                    }
                    else {
                        alert(result.message);
                    }
                }
                catch (error) {
                    console.error("Lỗi trong quá trình gửi yêu cầu:", error);
                    alert("Không thể gửi yêu cầu trả đơn hàng. Vui lòng thử lại.");
                }
            };
        }
        if (AcceptBtn2)
        {
            AcceptBtn2.onclick = async function ()
            {
                const orderId = this.getAttribute("data-orderid");
                const orderCode = this.getAttribute("data-ordercode");
                const response = await fetch('/UserOrder/CheckRechargeWallet', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        order_id: orderId,
                        check: parseInt(1)
                    })
                });

                const result = await response.json();

                console.log(result);

                if (result.success)
                {
                    var viewName = '@ViewBag.View'; // Razor gán giá trị vào biến JavaScript
                    const url = `/Admin/UserOrder/${viewName}`; // Tạo URL động
                    window.location.href = url; // Điều hướng
                }
                else
                {
                    alert(result.message);
                }
            };
        }
        if (RefuseBtn2)
        {
            RefuseBtn2.onclick = async function () {
                const orderId = this.getAttribute("data-orderid");
                const discardrechargeBtn = document.getElementById("discardrechargeBtn");
                const discardrechargeReason = document.getElementById("discardrechargeReason");

                discardrechargeReason.value = "";

                // Truyền dữ liệu vào nút xác nhận trong modal
                discardrechargeBtn.setAttribute("data-orderid", orderId);

                const bootstrapModal = new bootstrap.Modal(discardrechargeModal);
                bootstrapModal.show();
            };
        }
        if (discardrechargeBtn)
        {
            discardrechargeBtn.onclick = async function ()
            {
                const orderId = this.getAttribute("data-orderid");
                const discardrechargeReason = document.getElementById("discardrechargeReason").value.trim();

                if (!discardrechargeReason) {
                    const modalBody = document.querySelector("#MessagesModal .modal-body p");
                    modalBody.textContent = `Để từ chối, hãy thêm lý do.`; // Thông báo lỗi

                    // Hiển thị modal với jQuery
                    $("#MessagesModal").modal("show");

                    // Tự động tắt modal sau 3 giây
                    setTimeout(function () {
                        $("#MessagesModal").modal("hide");
                    }, 1500);

                    return;
                }

                try {
                    // Gửi yêu cầu cập nhật trạng thái hủy đơn hàng lên server
                    const response = await fetch('/UserOrder/CheckRechargeWallet', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            order_id: orderId,
                            discardrechargeReason: discardrechargeReason,
                            check: parseInt(0)
                        })
                    });

                    const result = await response.json();

                    if (result.success) {
                        var viewName = '@ViewBag.View'; // Razor gán giá trị vào biến JavaScript
                        const url = `/Admin/UserOrder/${viewName}`; // Tạo URL động
                        window.location.href = url; // Điều hướng
                    }
                    else {
                        alert(result.message);
                    }
                }
                catch (error) {
                    console.error("Lỗi trong quá trình gửi yêu cầu:", error);
                    alert("Không thể gửi yêu cầu từ chối hoàn tiền. Vui lòng thử lại.");
                }
            };
        }
        if (PrintOrder)
        {
            PrintOrder.onclick = async function ()
            {
                const orderCode = this.getAttribute("data-ordercode");
                const items = [orderCode]; // Tạo mảng chứa mã đơn hàng
                const result = await printOrder(items); // Gửi request đến API GHN

                if (result) {
                    const token = result.token; // Lấy token từ kết quả trả về
                    const url = `https://dev-online-gateway.ghn.vn/a5/public-api/printA5?token=${token}`; // URL chứa token
                    window.open(url, '_blank'); // Mở tab mới
                }
                else {
                    alert(result.message);
                }
            };
        }


        const orderCode = "@Model.OrderCode";

        if (@Model.OrderStatusID !== 1)
        {
            PrintOrder.textContent = "In đơn hàng";
            PrintOrder.style.visibility = "visible";
        }
        if (@Model.OrderStatusID !== 5) {
            const shippingDetail = await getShippingDetail(orderCode);

            const timelineContainer = document.getElementById("shipping_items");

            const statusItem1 = document.createElement("div");
            statusItem1.classList.add("timeline-item", "completed");

            statusItem1.innerHTML = `
                <div class="timeline-icon"><i class="fa fa-check-circle"></i></div>
                <div class="timeline-content">
                    <p class="status-text">Đơn hàng đã được đặt</p>
                    <span class="timestamp">${"@Model.CreatedAt.Value.ToString("HH:mm dd-MM-yyyy")"}</span>
                </div>
            `;

            timelineContainer.prepend(statusItem1);


            const createdDate = new Date(shippingDetail.created_date);
            const formattedDate = formatDate(createdDate); // Hàm định dạng ngày giờ

            const statusItem = document.createElement("div");
            statusItem.classList.add("timeline-item", "completed");

            statusItem.innerHTML = `
                <div class="timeline-icon"><i class="fa fa-check-circle"></i></div>
                <div class="timeline-content">
                    <p class="status-text">Người bán đang chuẩn bị hàng</p>
                    <span class="timestamp">${formattedDate}</span>
                </div>
            `;

            timelineContainer.prepend(statusItem);

            if (shippingDetail.log.length > 0 && Array.isArray(shippingDetail.log) && shippingDetail.log) {
                shippingDetail.log.forEach(logEntry => {
                    const logDate = new Date(logEntry.updated_date);
                    const formattedLogDate = formatDate(logDate); // Hàm định dạng ngày giờ

                    const statusItem = document.createElement("div");
                    statusItem.classList.add("timeline-item", "completed");
                    statusItem.innerHTML = `
                    <div class="timeline-icon"><i class="fa fa-check-circle"></i></div>
                    <div class="timeline-content">
                        <p class="status-text">${getStatusText(logEntry.status)}</p>
                        <span class="timestamp">${formattedLogDate}</span>
                    </div>
                `;
                    timelineContainer.prepend(statusItem);
                });
            }
        }
        else
        {
            const shippingDetail = await getShippingDetail(orderCode);

            const timelineContainer = document.getElementById("shipping_items");

            const createdDate = new Date(shippingDetail.created_date);
            const formattedDate = formatDate(createdDate); // Hàm định dạng ngày giờ

            const statusItem = document.createElement("div");
            statusItem.classList.add("timeline-item", "completed");

            statusItem.innerHTML = `
                <div class="timeline-icon"><i class="fa fa-check-circle"></i></div>
                <div class="timeline-content">
                    <p class="status-text">Đơn hàng đã được chuẩn bị</p>
                    <span class="timestamp">${formattedDate}</span>
                </div>
            `;

            timelineContainer.prepend(statusItem);

            if (shippingDetail.log.length > 0 && Array.isArray(shippingDetail.log) && shippingDetail.log) {
                shippingDetail.log.forEach(logEntry => {
                    const logDate = new Date(logEntry.updated_date);
                    const formattedLogDate = formatDate(logDate); // Hàm định dạng ngày giờ

                    const statusItem = document.createElement("div");
                    statusItem.classList.add("timeline-item", "completed");
                    statusItem.innerHTML = `
                    <div class="timeline-icon"><i class="fa fa-check-circle"></i></div>
                    <div class="timeline-content">
                        <p class="status-text">${getStatusText(logEntry.status)}</p>
                        <span class="timestamp">${formattedLogDate}</span>
                    </div>
                `;
                    timelineContainer.prepend(statusItem);
                });
            }

            if (shippingDetail.status === "delivered") {
                AcceptBtn2.textContent = "Hoàn tiền";
                AcceptBtn2.style.visibility = "visible"; // Hiển thị nút

                RefuseBtn2.textContent = "Từ chối hoàn tiền";
                RefuseBtn2.style.visibility = "visible"; // Hiển thị nút
            }
            else {
                // Ẩn nút nếu không phải trạng thái "delivered"
                AcceptBtn2.style.visibility = "hidden";
                RefuseBtn2.style.visibility = "hidden";
            }
        }
    });

    // Hàm định dạng ngày và giờ theo kiểu "HH:mm dd-MM-yyyy"
    function formatDate(date) {
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();

        return `${hours}:${minutes} ${day}-${month}-${year}`;
    }

    // Hàm xử lý trạng thái logEntry.status
    function getStatusText(status) {
        switch (status) {
            case 'picking':
                return 'Đang lấy hàng';
            case 'cancel':
                return 'Hủy đơn hàng';
            case 'picked':
                return 'Nhân viên đã lấy hàng';
            case 'storing':
                return 'Hàng đang nằm ở kho';
            case 'transporting':
                return 'Đang luân chuyển hàng';
            case 'sorting':
                return 'Đang phân loại hàng hóa';
            case 'delivering':
                return 'Nhân viên đang giao cho người nhận';
            case 'delivered':
                return 'Giao hàng thành công';
        }
    }
</script>
